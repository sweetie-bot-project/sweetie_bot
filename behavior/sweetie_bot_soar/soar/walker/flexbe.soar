# FLEXBE ACTION SUPPPORT

# START BEHAVIOR

# apply flexbe operator 
sp {apply*operator*flexbe
	(state <s> ^operator <op> ^io.output-link <ol>)
   	(<op> ^name flexbe ^behavior <bh> ^param <p> ^drive <d> - ^goal)
	(<ol> - ^flexbe)
-->
	(<ol> ^flexbe <cmd>)
	(<cmd> ^name <bh>)
	(<cmd> ^param (deep-copy <p>) )
	(<cmd> ^operator <op1>)
	(<op1> ^name flexbe)	
	(<op1> ^drive <d>)	
	(write |Flexbe: start behavior: | <bh>)
}

# apply flexbe operator for goal related opertor
sp {apply*operator*flexbe*goal
	(state <s> ^operator <op> ^io.output-link <ol>)
   	(<op> ^name flexbe ^behavior <bh> ^param <p> ^drive <d> ^goal <g>)
	(<ol> - ^flexbe)
-->
	(<ol> ^flexbe <cmd>)
	(<cmd> ^name <bh>)
	(<cmd> ^param (deep-copy <p>) )
	(<cmd> ^operator <op1>)
	(<op1> ^name flexbe)	
	(<op1> ^drive <d>)	
	(<op1> ^goal <g>)	
	(write |Flexbe: start behavior: | <bh>)
}

# WAIT BEHAVIOR

# wait for flexbe behavior execution
sp {propose*flexbe*wait
	(state <s> ^io.output-link.flexbe <cmd> ^io.input-link.clock.cycle <c>)
	(<cmd> -^status ^operator.drive <d>)
-->
	(<s> ^operator <o> + =)
   	(<o> ^name flexbe-wait ^drive <d> ^type wait-execution)
}

sp {apply*flexbe*wait
	(state <s> ^operator <op> ^io.output-link <ol>)
   	(<op> ^name flexbe-wait)
-->
	(<ol> ^nop <cmd>)
}

# FINISH BEHAVIOR

# when operator is finished remove cmd
sp {propose*flexbe*cmd*completed*hook
	(state <s> ^io.output-link.flexbe <cmd>)
	(<cmd> ^status <status>)
-->
	(<s> ^operator <o> + > =)
   	(<o> ^name flexbe-completed ^cmd <cmd>)
}

sp {apply*flexbe*cmd*completed*hook*remove*cmd
	(state <s> ^operator <op> ^io.output-link <ol>)
   	(<op> ^name flexbe-completed ^cmd <cmd>)
-->
	(<ol> ^flexbe <cmd> -)
	(write |Flexbe: remove behavior cmd. |)
}

