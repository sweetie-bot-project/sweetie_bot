# OVERALL BEHAVIOR SELECTION

# process: all related subprocesses will be automatilly attaches all to state
sp {talker*elaborate*decision
	(state <s> ^substate main)
-->
	(<s> ^process <proc>)
	(<proc> ^name main ^substate main)
}

# PROPOSE ANIMATION OR WAIT

# Propose perform animation (no one around)
sp {talker*propose*decide-animation
	(state <s> ^substate main -^performing-animation)
-->
	(<s> ^operator <op> +, =)
   	(<op> ^name performing-animation ^substate animation ^process-args <a> ^drive movement)
	(<a> ^tag alone ^deadline-time 30.0)
}

# invoke RandHeadMovements for random timeout instead of animation 
sp {talker*propose*rand*head*movements
	(state <s> ^substate main -^moving-head)
-->
	(<s> ^operator <op> +, =)
   	(<op> ^name moving-head ^substate flexbe ^process-args <a> ^interruptable hard ^drive movement)
   	(<a> ^behavior ExecuteRandHeadMovements ^timeout (+ 5 (rand-int 15))) 
}

# wait 
sp {talker*propose*wait
	(state <s> ^substate main ^{<<|performing-animation| |moving-head|>>} <proc>)
	(<proc> ^substate <substate>)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name wait-proccess ^substate <substate> ^drive movement ^process-link <proc>)
}

# LOOK AT OBJECT

#sp {talker*propose*look-at
#	(state <s> ^substate main ^drive <d> ^beliefs.object <obj>)
#	(<obj> ^input-link.visible now)
#	(<d> ^name curiosity)
#-->
#	(<s> ^operator <o> + =)
#   	(<o> ^name look-at ^substate look-at ^object <obj> ^delay 2.0 ^timeout 20.0 ^drive <d>)
#}

# SWITCH ATTENTION OVER MULTIPLE OBJECTS

sp {talker*propose*look-at
	(state <s> ^substate main ^beliefs.object <obj>)
	(<obj> ^input-link.visible now)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name look-at-multiple-objects ^substate attention ^process-args <a> ^drive curiosity)
}

# SELECT HUMAN TO TALK

# select human if we a looking at him 
sp {talker*propose*select-human-to-talk
	(state <s> ^substate main ^beliefs-stable.predicate <pred> ^beliefs <b>)
	(<pred> ^name looking-at ^object <obj>)
	(<obj> ^type human)
	-{(<b> ^predicate <p>) (<p> ^name talked ^object <obj>)}
-->
	(<s> ^operator <o> + =)
   	(<o> ^name talking ^substate talk ^process-args <a> ^drive social)
	(<a> ^object <obj>)
}

sp {talker*propose*talk
	(state <s> ^substate main ^talking <proc>)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name talking-continue ^substate talk ^process-link <proc> ^drive social)
}

# TODO: results support top-state
sp {talker*propose*talking-succeed
	(state <s> ^bottom-state 1 ^beliefs.event <ev>)
	(<ev> ^name talking ^reason terminated ^process.object <obj> -^processed talking-succeed)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name talking-succeed ^type cognition automatic ^add-predicate <pred> ^mark-processed <ev>)
	(<pred> ^name talked ^object <obj> ^deadline-time 60.0)
}
	

# SAY HELLO

# we are looking at human but he is not greeted the start greeting him
#sp {talker*propose*say-greet
#	(state <s> ^substate main -^greeting ^beliefs <b> ^beliefs-stable <bs>)
#	(<bs> ^predicate <pred>)
#	(<pred> ^name looking-at ^object <obj>)
#	(<obj> ^type human)
#	-{(<b> ^predicate <pred>) 
#	  (<pred> ^name greeted ^object <obj>)}
#-->
#	(<s> ^operator <o> +, =)
#   	(<o> ^name greeting ^substate ask ^drive social ^process-args <a>) 
#	(<a> ^object <obj> ^topic greeting ^text |Hello, I am Sweetie Bot!| ^animation-tag greet ^result <r-succeed>)
#	(<r-succeed> ^status succeed ^add-predicate <n-pred>)
#	(<n-pred> ^name greeted ^object <obj>)
#}
#
#sp {talker*propose*say-greet-continue
#	(state <s> ^substate main ^greeting <proc>)
#-->
#	(<s> ^operator <o> +, =)
#   	(<o> ^name greeting-continue ^substate ask ^drive social ^process-link <proc>) 
#}
#
#sp {talker*propose*detect-greeted
#	(state <s> ^bottom-state 1 ^beliefs.event <ev>)
#	(<ev> ^name talk-answered ^actor <obj> ^question-topic greeting ^answer-topic greeting -^processed object-is-greeted)
#-->
#	(<s> ^operator <op> +, =)
#	(<op> ^name object-is-greeted ^type cognition automatic ^add-predicate <pred> ^mark-processed <ev>)
#	(<pred> ^name greeted ^object <obj>)
#}
#
