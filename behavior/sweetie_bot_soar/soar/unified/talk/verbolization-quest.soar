#
# PREDIACTES VERBOLIZATION
#
# Utility levels:
#
# 1. 20 --- general predicates verbolization, second verbolization
# 2. 20 --- general questions
# 3. 40-50 --- greeting and making acquitance
# 4. 70 --- general knowledge additions
# 5. 80 --- reactions
#
	
# GENERAL KNOWLEDGE

# if quest topic is ignored then stop quest
sp {quest*propose*ignor-topic-terminate-quest
	(state <s> ^bottom-state 1 ^beliefs <b>)
	(<b> ^predicate <pred1> <pred2>)
	(<pred1> ^name quest ^object <obj>)
	(<pred2> ^name ignor-topic ^actor <obj> ^topic quest)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name ignor-topic-terminate-quest ^type cognition automatic ^remove-predicate <pred1>)
}

# VERBOLIZATION RULES

# ask if speaker is interest in quest
sp {quest*elaborate*ask-about-quest
	(state <s> ^substate talk ^beliefs <b> ^object <obj> ^verbolization <v>)
  -{(<b> ^predicate <pred1>) (<pred1> ^name quest ^object <obj>)}
  -{(<b> ^predicate <pred2>) (<pred2> ^name quest-finished ^actor <obj>)}
-->
	(<v> ^frame <f>)
	(<f> ^topic ask-about-quest ^utility 20 ^type question ^animation-tag question ^text |Хочешь поиграть со мной в квест?|)
}

# ask about quest again
sp {quest*elaborate*ask-about-quest-again
	(state <s> ^substate talk ^beliefs <b> ^object <obj> ^verbolization <v>)
  	(<b> ^predicate <pred>) 
	(<pred> ^name quest-finished ^actor <obj> ^ending <ending>)
-->
	(<v> ^frame <f>)
	(<f> ^topic ask-about-quest ^utility 20 ^type question ^animation-tag question ^text (concat |В прошлый раз в квесте ты получил концовку "| <ending> |". Хочешь попробовать снова?|))
}

sp {talk-answered*elaborate*ask-about-quest*reaction
	(state <s> ^substate talk-answered ^question-topic ask-about-quest)
-->
	(<s> ^reaction-conditional <r1> <r2>)
	(<r1> ^answer-topic yes ^topic reaction-speaker-agreed-to-quest ^type reaction ^text |Отлично! Тогда я начинаю!| ^animation-tag confirmation)
	(<r2> ^answer-topic no ^topic reaction-speaker-agreed-to-quest ^type reaction ^text |Ты явно боишься получить плохую концовку.| |Не хочешь -- как хочешь.| ^animation-tag rejection)
}

sp {talk-answered*propose*ask-about-quest*yes
	(state <s> ^substate talk-answered ^question-topic ask-about-quest ^answer-topic yes ^actor <obj> ^actions <a>)
-->
	(<a> ^add-predicate <pred>)
	(<pred> ^name quest ^object <obj> ^state meet-with-sweetie ^segment-id 0 ^state-frame <f> ^deadline-time 600.0)
}

sp {talk-answered*propose*ask-about-quest*yes*terminate-quest-finished
	(state <s> ^substate talk-answered ^question-topic ask-about-quest ^answer-topic yes ^actor <obj> ^beliefs <b> ^actions <a>)
  	(<b> ^predicate <pred>) 
	(<pred> ^name quest-finished ^actor <obj>)
-->
	(<a> ^remove-predicate <pred>)
}

sp {talk-answered*propose*ask-about-quest*no
	(state <s> ^substate talk-answered ^question-topic ask-about-quest ^answer-topic no ^actor <obj> ^actions <a>)
-->
	(<a> ^add-predicate <pred>)
	(<pred> ^name reject-talk-topic ^object <obj> ^topic ask-about-quest ^deadline-time 60.0)
}

# prepend next quest phrase with pharse about reterning to quest
sp {quest*elaborate*say-about-returning-to-quest
	(state <s> ^substate talk ^beliefs <b> ^object <obj> ^verbolization <v>)
	(<b> ^predicate <pred>)
	(<pred> ^name quest ^object <obj>)
	(<s> -^last-said-topic {<<|quest| |say-return-to-quest| |reaction-speaker-agreed-to-quest|>>})
-->
	(<v> ^frame <f>)
	(<f> ^topic say-return-to-quest ^utility 31 ^type reaction ^animation-tag none ^text |Я продолжу наш квест!| |Вернемся к квесту, который мы прервали.|)
}

#
# propose contine quest interupted long time ago
#
sp {quest*elaborate*ask-about-returning-to-quest
	(state <s> ^substate talk ^beliefs <b> ^object <obj>  ^events <ev-pool> ^verbolization <v> ^time <clock>)
	(<b> ^predicate <pred>)
	(<pred> ^name quest ^object <obj>)
	(<ev-pool> ^event <ev>)
	(<ev> ^name talk-said ^topic quest ^object <obj> ^initiated-at <time>)
	-(<clock> ^recently {< <time>})
-->
	(<v> ^frame <f>)
	(<f> ^topic ask-return-to-quest ^utility 31 ^type question ^animation-tag question ^text |Наш квест прервался, может, продолжим?|)
}

sp {talk-answered*elaborate*ask-about-returning-to-quest*reaction
	(state <s> ^substate talk-answered ^question-topic ask-about-returning-to-quest)
-->
	(<s> ^reaction-conditional <r1> <r2>)
	(<r1> ^answer-topic yes ^topic reaction-speaker-agreed-to-quest ^type reaction ^text |Отлично! Тогда я начинаю!| ^animation-tag confirmation)
	(<r2> ^answer-topic no ^topic reaction-speaker-agreed-to-quest ^type reaction ^text |Тогда я сброшу твой прогресс.| |Не хочешь -- как хочешь. В следующий раз начнешь заново.| ^animation-tag rejection)
}

sp {talk-answered*propose*ask-continue-quest-for-other-speaker*yes
	(state <s> ^substate talk-answered ^question-topic ask-about-returning-to-quest ^answer-topic yes ^actor <obj> ^beliefs <b> ^actions <a> ^time.now <now>)
	(<b> ^predicate <pred>)
	(<pred> ^name quest ^object <obj> ^initiated-at <old>)
-->
	(<a> ^parent <pred> ^attribute initiated-at ^remove-value <old> ^link-value <now>)
}

sp {talk-answered*propose*ask-about-returning-to-quest*no
	(state <s> ^substate talk-answered ^question-topic ask-about-returning-to-quest ^answer-topic no ^actor <obj> ^beliefs <b> ^actions <a>)
	(<b> ^predicate <pred>)
	(<pred> ^name quest ^object <obj>)
-->
	(<a> ^remove-predicate <pred>)
}

#
# propose another speaker continue quest if it was abandoned resently
#
sp {quest*elaborate*ask-continue-quest-for-other-speaker
	(state <s> ^substate talk ^object <obj> ^beliefs <b> ^events <ev-pool> ^verbolization <v> ^time <clock>)
	(<b> ^predicate <pred>)
	(<pred> ^name quest ^object {<> <obj> <other>})
	(<ev-pool> ^event <ev>)
	(<ev> ^name talk-said ^topic quest ^object <other> ^initiated-at <time>)
	-(<clock> ^recently {>= <time>})
-->
	(<v> ^frame <f>)
	(<f> ^topic ask-continue-quest-for-other-seaker ^utility 30 ^type question ^animation-tag question ^text |Хочешь продолжить квест, который проходил другой собеседник?|)
}

sp {talk-answered*elaborate*ask-continue-quest-for-other-speaker*reaction
	(state <s> ^substate talk-answered ^question-topic ask-continue-quest-for-other-seaker)
-->
	(<s> ^reaction-conditional <r1> <r2>)
	(<r1> ^answer-topic yes ^topic reaction-speaker-agreed-to-quest ^type reaction ^text |Отлично! Тогда я начинаю!| ^animation-tag confirmation)
	(<r2> ^answer-topic no ^topic reaction-speaker-agreed-to-quest ^type reaction ^text |Ты явно боишься получить плохую концовку.| |Не хочешь -- как хочешь.| ^animation-tag rejection)
}

sp {talk-answered*propose*ask-continue-quest-for-other-speaker*yes
	(state <s> ^substate talk-answered ^question-topic ask-continue-quest-for-other-seaker ^answer-topic yes ^actor <obj> ^beliefs <b> ^actions <a>)
	(<b> ^predicate <pred>)
	(<pred> ^name quest ^object {<> <obj> <other>} ^initiated-at <time>)
	-{(<b> ^predicate {<> <pred> <pred2>}) 
	  (<pred2> ^name quest ^initiated-at {> <time>})}
-->
	(<a> ^parent <pred> ^attribute object ^remove-value <other> ^link-value <obj>)
}

sp {talk-answered*propose*ask-continue-quest-for-other-speaker*no
	(state <s> ^substate talk-answered ^question-topic ask-continue-quest-for-other-seaker ^answer-topic no ^actor <obj> ^actions <a>)
-->
	(<a> ^add-predicate <pred>)
	(<pred> ^name reject-talk-topic ^object <obj> ^topic ask-continue-quest-for-other-seaker ^deadline-time 120.0)
}

# QUEST SEGMENT VERBOLIZATION

# translate state segment to verbolization frame
sp {quest*elaborate*verbolize-current-segment
	(state <s> ^substate talk ^beliefs.predicate <pred> ^object <obj> ^verbolization <v>)
	(<pred> ^name quest ^object <obj> ^state <state> ^segment-id <id> ^state-frame.segment <segment>)
   	(<segment> ^id <id> ^type <type>)
-->
	(<v> ^frame <f>)
	(<f> ^topic quest ^utility 30 ^type <type> ^state <state> ^quest-segment <segment>)
}

# copy text data to frame
sp {quest*elaborate*verbolize-current-segment*parts
	(state <s> ^substate talk ^verbolization.frame <f>)
	(<f> ^topic quest ^quest-segment <segment>)
	(<segment> ^{<<|text| |sound| |animation-tag| |character| |scene|>> <attr>} <value>)
-->
	(<f> ^<attr> <value>)
}

# elaborate defult scene
# TODO: move to quest script?
sp {quest*elaborate*default-scene
	(state <s> ^top-state 1 ^beliefs.predicate <pred>)
	(<pred> ^name quest ^state-frame <f>)
	(<f> ^segment <segment1> <segment2>)
   	(<segment1> ^scene <scene> ^{<<|next-id| |ignor-id|>>} <id>)
	(<segment2> ^id <id>)
	-(<segment2> ^scene {<> <scene>})
-->
	(<segment2> ^scene <scene>)
}

# EVENT PROCESSING

# if reaction segment was verbolized proceed to next segment: increase id by one
sp {talk-said*propose*reaction-next-segment
	(state <s> ^substate talk-said ^topic quest ^object <obj> ^beliefs.predicate <pred> ^actions <a>)
	(<pred> ^name quest ^object <obj> ^segment-id <id> ^state-frame.segment <segment>)
   	(<segment> ^id <id> ^type reaction -^next-state ^next-id <next-id>)
-->
	(<a> ^parent <pred> ^attribute segment-id  ^remove-value <id> ^link-value <next-id>)
}

sp {talk-said*propose*reaction-next-state
	(state <s> ^substate talk-said ^topic quest ^object <obj> ^beliefs.predicate <pred> ^actions <a>)
	(<pred> ^name quest ^object <obj> ^state <state> ^segment-id <id> ^state-frame.segment <segment>)
   	(<segment> ^id <id> ^type reaction ^next-state <next-state>)
-->
	(<a> ^parent <pred> ^attribute state ^remove-value <state> ^link-value <next-state>)
	(<a> ^parent-2 <pred> ^attribute-2 segment-id ^remove-value-2 <id> ^link-value-2 0)
}

# if final reaction segment was verbolized end the quest: remove quest predicate and add quest-finished predicate
sp {talk-said*propose*reaction-ending-segment
	(state <s> ^substate talk-said ^topic quest ^object <obj> ^beliefs.predicate <pred> ^actions <a>)
	(<pred> ^name quest ^object <obj> ^segment-id <id> ^state-frame.segment <segment>)
   	(<segment> ^id <id> ^type reaction ^ending <ending>)
-->
	(<a> ^remove-predicate <pred> ^add-predicate <pred1>)
   	(<pred1> ^name quest-finished ^actor <obj> ^ending <ending>)
}

# if valid answer was received assume question answered and proceed to next state
sp {talk-answered*propose*question-valid-answer
	(state <s> ^substate talk-answered ^question-topic quest ^answer-topic <answer> ^actor <obj> ^beliefs.predicate <pred> ^actions <a>)
	(<pred> ^name quest ^object <obj> ^state <state> ^segment-id <id> ^state-frame.choice <choice>)
   	(<choice> ^answer-topic <answer> ^next-state <next-state>)
-->
	(<s> ^conclusion answer-specific-reaction)
	(<a> ^parent <pred> ^attribute state ^remove-value <state> ^link-value <next-state>)
	(<a> ^parent-2 <pred> ^attribute-2 segment-id ^remove-value-2 <id> ^link-value-2 0)
}

# if any answer is valid assume question answered and proceed to next state
# this is default reaction, it has lower priority then specific answer
sp {talk-answered*propose*question-default-answer
	(state <s> ^substate talk-answered ^question-topic quest ^answer-topic <answer> ^actor <obj> ^beliefs.predicate <pred> ^actions <a>)
	(<pred> ^name quest ^object <obj> ^state <state> ^segment-id <id> ^state-frame <f>)
	(<f> ^choice <choice1>)
	(<choice1> ^answer-topic default-reaction ^next-state <next-state>)
	-(<f> ^choice.answer-topic <answer>)
-->
	(<s> ^conclusion answer-default-reaction)
	(<a> ^parent <pred> ^attribute state ^remove-value <state> ^link-value <next-state>)
	(<a> ^parent-2 <pred> ^attribute-2 segment-id ^remove-value-2 <id> ^link-value-2 0)
}

# if question is ignored procced to ignor-id segment
sp {talk-answered*propose*question-ignored
	(state <s> ^substate talk-ignored ^question-topic quest ^actor <obj> ^beliefs.predicate <pred> ^actions <a>)
	(<pred> ^name quest ^object <obj> ^segment-id <id> ^state-frame.segment <segment>)
   	(<segment> ^id <id> ^type reaction ^ignor-id <next-id>)
-->
	(<a> ^parent <pred> ^attribute segment-id  ^remove-value <id> ^link-value <next-id>)
}

