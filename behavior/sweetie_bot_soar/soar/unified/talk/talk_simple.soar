#
# TALKING
#
# 1. Use one of start phrases to begin dialog.
# 2. look at speaker until speech event
# 2. use llm to transcribe it
# 3. verbilize result
#
#
#  talk-event
#    talk-said
#       question
#       statement
#    talk-heard
#       unknown-class
#       known-class
#       answer
#          irrelevant
#    talk-ignored
#    talk-pause
#    talk-illegible
#       

# ELABORATIONS 

# create basic agumentation for talk substate
sp {talk-llm*elaborate*substate
	(state <s> ^substate talk-llm ^args <args>)
	(<args> ^object <obj>)
-->
	(<s> ^object <obj> ^recent-events <ev>)	
}

# remember process for 10 minutes
sp {talk-llm*elaborate*memorization-time
	(state <s> ^substate talk-llm ^process <proc>)
-->
	(<proc> ^memorization-time 120.0)
}

# relevant talk-* events
# TODO: use negation
sp {talk-llm*elaborate-recent-talk-events
   (state <s> ^substate talk-llm ^object <obj> ^events.event <ev> ^time.recently <time> ^recent-events <ev-pool>)
   (<ev> ^name {<<|talk-said| |talk-heard| |talk-ignored| |talk-no-answer| |talk-illegible|>> <ev-name>} ^object <obj> ^initiated-at {>= <time>})
-->
	(<ev-pool> ^event <ev>)
}

# the most recent event
sp {talk-llm*elaborate-the-most-recent-talk-event
	(state <s> ^substate talk-llm ^recent-events <ev-pool>)
	(<ev-pool> ^event <ev>)
	(<ev> ^initiated-at <time>)
	-{(<ev-pool> ^event {<> <ev> <ev-other>})
	  (<ev-other> ^initiated-at {> <time>})
	}
-->
	(<s> ^most-recent-event <ev>)
}

# looking-at 
sp {talk-llm*elaborate*looking-at
	(state <s> ^substate talk-llm ^beliefs-stable.predicate <pred> ^object <obj>)
	(<pred> ^name looking-at ^object <obj>)
-->
	(<s> ^looking-at yes)
}

# inspect talk events for ^lang attrib and use last one
sp {talk-llm*elborate*lang-from-last-event
	(state <s> ^substate talk-llm ^recent-events <ev-pool>)
	(<ev-pool> ^event <ev1>)
	(<ev1> ^lang <lang> ^initiated-at <t1>)
	-{(<ev-pool> ^event <ev2>)
	  (<ev2> ^lang ^initiated-at {> <t1>})
	}
-->
	(<s> ^lang <lang> ^lang-source event)
}

# default language is always english
sp {talk-llm*elborate*default-lang
	(state <s> ^substate talk-llm -^lang-source event)
-->
	(<s> ^lang en ^lang-source default)
}

#
# DECISION RULES
#

# detect answering subprocess
sp {talk-llm*elaborate*answering-subporcess
	(state <s> ^substate talk-llm ^{<<|greeting| |general-answering-event| |general-answering-pause| |specific-answering|>>} <proc>) 
-->
	(<s> ^answering <proc>)
}

sp {talk-llm*propose*answering-continue
	(state <s> ^substate talk-llm ^answering <proc>)
	(<proc> ^name <name> ^substate <substate>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name <name> ^substate <substate> ^process-link <proc>)
}

#
# perform greeting if no talk event happened before
#
sp {talk-llm*propose*greeting
	(state <s> ^substate talk-llm ^looking-at -^answering ^recent-events <ev-pool> ^lang <lang> ^object <obj>)
	(<ev-pool> -^event)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name greeting ^substate verbolize ^process-args <proc>)
	(<proc> ^object <obj> ^topic greet ^result <res-succeed>)
	(<proc> ^text |Hello! I am Sweetie Bot!| ^animation-tag greeting ^lang <lang> ^emotion neutral ^type statement)
	(<res-succeed> ^print (concat |SPECIFIC: GREETING| (crlf)))
}

#
# answer on the last event
#
sp {talk-llm*propose*general-answer
	(state <s> ^substate talk-llm ^looking-at ^most-recent-event <ev> -^answering ^lang <lang> ^object <obj> ^process <sp>)
	(<ev> ^name {<<|talk-heard| |talk-ignored| |talk-no-answer| |talk-illegible|>>})
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name general-answering-event ^substate verbolize-llm ^process-args <args>)
	(<args> ^object <obj> ^lang <lang>)
}

#
# answer on long pause
#
sp {talk-llm*propose*answer-delay
	(state <s> ^substate talk-llm ^looking-at ^most-recent-event <ev> -^answering  ^lang <lang> ^object <obj> ^process <sp> ^time.just <t>)
	(<ev> ^initiated-at {< <t>})
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name general-answering-pause ^substate verbolize-llm ^process-args <args>)
	(<args> ^object <obj> ^lang <lang>)
}

# add recent talk events
sp {talk-llm*elaborate*verbolize-llm-related-events
	(state <s> ^substate talk-llm ^operator <op> + ^recent-events.event <ev>)
	(<op> ^substate verbolize-llm ^process-args <args>)
-->
	(<args> ^event <ev>)
}

# add related predicates
sp {talk-llm*elaborate*verbolize-llm-related-predicates
	(state <s> ^substate talk-llm ^operator <op> +  ^object <obj> ^beliefs.predicate <pred>)
	(<op> ^substate verbolize-llm ^process-args <args>)
	(<pred> ^{<<|object| |actor|>>} <obj> ^text)
-->
	(<args> ^predicate <pred>)
}

#
# DETERMINISTTIC REACTIONS
#

# prefer deterministic reactions
sp {talk-llm*prefer*specific-over-general
	(state <s> ^substate talk-llm ^operator <op1> + ^operator <op2> +)
	(<op1> ^name specific-answering)
	(<op2> ^name {<<|general-answering-event| |general-answering-pause|>>})
-->
	(<s> ^operator <op1> > <op2>)
}

sp {talk-llm*propose*goodbye
	(state <s> ^substate talk-llm ^looking-at ^most-recent-event <ev> -^answering ^lang <lang> ^object <obj> ^process <proc>)
	(<ev> ^name talk-heard ^token goodbye)
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name specific-answering ^substate verbolize ^process-args <args>)
	(<args> ^object <obj> ^topic goodbye ^text |Goodbye!| ^animation-tag goodbye ^lang <lang> ^emotion neutral ^type statement)
	(<args> ^result <res>)
	(<res> ^status succeed ^finish-status succeed ^finish-process <proc> ^print (concat |SPECIFIC: GOODBYE| (crlf)))
}

sp {talk-llm*propose*failsafe-answer
	(state <s> ^substate talk-llm -^answering ^beliefs.event <ev> ^lang <lang> ^object <obj> ^process <proc>)
	(<ev> ^name {<<|general-answering-pause| |general-answering-event|>>} ^reason terminated ^status failed ^process.object <obj>)
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name specific-answering ^substate verbolize ^process-args <args>)
	(<args> ^object <obj> ^topic goodbye ^text |Something bad happened with my world model... You are annoying me! Goodbye.!| ^animation-tag goodbye ^lang <lang> ^emotion angry ^type statement)
	(<args> ^result <res>)
	(<res> ^status succeed ^finish-status succeed ^finish-process <proc> ^print (concat |SPECIFIC: GOODBYE TO CLEAN BRAIN.| (crlf)))
}

sp {talk-llm*propose*ignor-me-answer
	(state <s> ^substate talk-llm ^looking-at -^answering ^beliefs.predicate <pred> ^lang <lang> ^object <obj> ^process <proc> ^time.just <time>)
	(<pred> ^name ignors-me ^actor <obj> ^initiated-at {> <time>})
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name specific-answering ^substate verbolize ^process-args <args>)
	(<args> ^object <obj> ^topic goodbye ^text |You are ignoring me! Goodbye!| ^animation-tag angry ^lang <lang> ^emotion angry ^type statement)
	(<args> ^result <res>)
	(<res> ^status succeed ^finish-status succeed ^finish-process <proc> ^print (concat |SPECIFIC: GOODBYE ON IGNORANCE.| (crlf)))
}

sp {talk-llm*propose*say-missing-answer
	(state <s> ^substate talk-llm -^answering ^beliefs.predicate <pred> ^lang <lang> ^object <obj> ^process <proc>)
	(<pred> ^name is-missing ^object <obj> ^initiated-at {> <time>})
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name saying-speaker-is-missing ^substate verbolize ^process-args <args>)
	(<args> ^object <obj> ^topic goodbye ^text |Speaker is missing.| ^animation-tag sad ^lang <lang> ^emotion sad ^type statement)
	(<args> ^result <res>)
	(<res> ^status succeed ^finish-status succeed ^finish-process <proc> ^print (concat |SPECIFIC: GOODBYE ON IGNORANCE.| (crlf)))
}

sp {talk-llm*propose*saying-missing
	(state <s> ^substate talk-llm ^saying-speaker-is-missing <proc>)
-->
 	(<s> ^operator <op> +, =)
	(<op> ^name saying-speaker-is-missing ^substate verbolize ^process-link <proc>)
}

#
# look-at at lowest priority
#

# simply looking at speaker as the worst choice
sp {talk-llm*propose*looking-at-speaker
	(state <s> ^substate talk-llm ^object <obj>)
-->
	(<s> ^operator <op> +, <)
	(<op> ^name looking-at-speaker ^substate look-at ^process-args <a>)
	(<a> ^object <obj> ^timeout 5.0 ^delay 1.0)
}

#
# missing speaker
#

# finding-speaker if look-at-speaker failed
sp {talk-llm*propose*searching-missing-speaker
	(state <s> ^substate talk-llm ^beliefs.event <ev> ^object <obj>)
	(<ev> ^name looking-at-speaker ^reason terminated ^status failed ^process <proc>)
	(<proc> ^object <obj>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name searching-missing-speaker ^substate flexbe ^process-args <a> ^interruptable hard)
	(<a> ^object <obj> ^behavior ExecuteJointTrajectoryAndSay ^joint_trajectory |head_look_around| ^text |Where are you?|)
}

# continue search until speaker is not visible
sp {talk-llm*propose*seaching-missing-speaker-wait
	(state <s> ^substate talk-llm ^searching-missing-speaker <proc> ^object.input-link <obj-il>)
	(<obj-il> -^visible now)
-->
	(<s> ^operator <o> +, =)
	(<o> ^name searching-missing-speaker-wait ^substate flexbe ^process-link <proc>)
}

# abort immediatelly is speaker is found
# more high level
sp {talk-llm*propose*seaching-missing-speaker-found
	(state <s> ^substate talk-llm ^searching-missing-speaker <proc> ^object.input-link.visible now ^io.output-link.flexbe <cmd>)
	(<cmd> -^status ^process <proc>)
-->
	(<s> ^operator <op> +)
	(<op> ^name searching-missing-speaker-abort ^type automatic cognition)
	(<op> ^parent <cmd> ^attribute abort ^link-value hard)
}

# comlete talk if speaker is misiing and not found
sp {talk-llm*propose*missing-speaker-is-not-found
	(state <s> ^substate talk-llm ^beliefs <b> ^object <obj>)
	(<b> ^event <ev>)
	(<ev> ^name searching-missing-speaker ^reason terminated ^status succeed ^process.object <obj>)
	(<obj> ^input-link <obj-il>)
	(<obj-il> -^visible now)
	-{
	  (<b> ^predicate <pred>)
	  (<pred> ^name is-missing ^object <obj>)
	}
-->
	(<s> ^operator <op> +, =)
	(<op> ^name speaker-is-missing ^type cognition automatic)
	(<op> ^add-predicate <pred-new>)
	(<pred-new> ^name is-missing ^object <obj> ^text |Human leaved abruply during previous conversation. Sweeie does not know why he did this.|)
}

#
# COGNITION: talk-heard, talk-illegible
#

# predicate symbolizing speech condition
sp {talk-llm*elaborate*hearing-speech-preicate
	(state <s> ^top-state 1 ^io.input-link.sound <snd> ^beliefs <b>)
	(<snd> ^speech 1)
-->
	(<b> ^predicate <pred>)
	(<pred> ^name hearing-speech ^input-link <snd>)
}

# speech end detected
sp {talk-llm*elaborate*hearing-speech*terminate
	(state <s> ^bottom-state 1 ^beliefs <b>)
	(<b> ^event <ev> ^process <proc>)
	(<ev> ^name hearing-speech ^reason terminated -^processed add-talk-event ^predicate.input-link <snd>)
	(<proc> ^substate talk-llm ^object <obj>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name add-talk-event ^type cognition automatic ^input-link <snd> ^add-event <ev-new> ^mark-processed <ev>)
	(<ev-new> ^object <obj>)
}

# speech is not decoded properly
sp {talk-llm*elaborate*hearing-speech*terminate*illegible
	(state <s> ^operator <op> +)
	(<op> ^name add-talk-event ^input-link <snd> ^add-event <ev-new>)
	(<snd> -^text)
-->
	(<ev-new> ^name talk-illegible ^memorization-time 3600.0)
	(<op> ^print (concat (crlf) (crlf) |TALK-ILLEGIBLE.| (crlf)))
}

# speech is decoded properly
sp {talk-llm*elaborate*hearing-speech*terminate*heard
	(state <s> ^operator <op> +)
	(<op> ^name add-talk-event ^input-link <snd> ^add-event <ev-new>)
	(<snd> ^text <text> ^lang <lang>)
-->
	(<ev-new> ^name talk-heard ^text <text> ^lang <lang> ^memorization-time 3600.0)
	(<op> ^print (concat (crlf) (crlf) |TALK-HEARD: | <text> |(| <lang> |)| (crlf)))
}

# copy extracted tokens
sp {talk-llm*elaborate*hearing-speech*terminate*elements
	(state <s> ^operator <op> +)
	(<op> ^name add-talk-event ^input-link <snd> ^add-event <ev-new>)
	(<snd> ^element <value>)
-->
	(<ev-new> ^token <value>)
}

#
# COGNITION: talk-ignored
# 

# initiate predicate at talk said
sp {talk-llm*propose*add-talk-waiting-answer
	(state <s> ^bottom-state 1 ^beliefs <b> ^io.input-link.sound.speech 0)
	(<b> ^event <ev>)
	(<ev> ^name talk-said ^object <obj>)
	-{
	  (<b> ^predicate <p>)
	  (<p> ^name talk-waiting-answer ^object <obj>)
	}
--> 
	(<s> ^operator <op> +, =)
	(<op> ^name add-talk-waiting-answer ^type cognition automatic ^add-predicate <pred>)
	(<pred> ^name talk-waiting-answer ^object <obj> ^event <ev> ^deadline-time 6.0)
}

# terminate predicate on speaking
sp {talk-llm*propose*terminate-talk-waiting-answer
	(state <s> ^bottom-state 1 ^beliefs.predicate <pred> ^io.input-link.sound.speech 1)
	(<pred> ^name talk-waiting-answer)
--> 
	(<s> ^operator <op> +, =)
	(<op> ^name terminate-talk-waiting-answer ^type cognition automatic ^remove-predicate <pred>)
}

# talk-ignored: speaker ignors question
sp {talk-llm*propose*add-talk-ignored
	(state <s> ^top-state 1 ^beliefs <b> ^io.input-link.sound.speech 0)
	(<b> ^event <ev>)
   	(<ev> ^name talk-waiting-answer ^reason deadline ^predicate <pred>)
	(<pred> ^object <obj> ^event <talk-said>)
	(<talk-said> ^type question)
-->
	(<b> ^event <ev-new>)
	(<ev-new> ^name talk-ignored ^object <obj> ^talk-event <talk-said> ^memorization-time 3600.0)
}

# talk-no-answer: sweaker do not answered
sp {talk-llm*propose*add-talk-no-answer
	(state <s> ^top-state 1 ^beliefs <b> ^io.input-link.sound.speech 0)
	(<b> ^event <ev>)
   	(<ev> ^name talk-waiting-answer ^reason deadline ^predicate <pred>)
	(<pred> ^object <obj> ^event <talk-said>)
	(<talk-said> ^type statement)
-->
	(<b> ^event <ev-new>)
	(<ev-new> ^name talk-no-answer ^object <obj> ^talk-event <talk-said> ^memorization-time 3600.0)
}

# detect ignorance
sp {talk-llm*propose*add-ignor-me-questions
	(state <s> ^bottom-state 1 ^beliefs <b> ^events <ev-pool>)
	(<b> ^event <ev1>)
	(<ev1> ^name talk-ignored ^object <obj> ^initiated-at <t1>)
	(<ev-pool> ^event {<> <ev1> <ev2>})
	(<ev2> ^name talk-ignored ^object <obj> ^initiated-at <t2>)
	-{(<ev-pool> ^event <ev3>)
	  (<ev3> ^name talk-heard  ^object <obj> ^initiated-at {< <t1> > <t2>})
	}
	-{(<b> ^predicate <pred>)
	  (<pred> ^name ignors-me ^actor <obj>)
	} 
-->
	(<s> ^operator <op> +, =)
	(<op> ^name add-ignors-me ^type cognition automatic ^add-predicate <pred-ignors>)
	(<pred-ignors> ^name ignors-me ^actor <obj> ^deadline-time 120.0)
	(<pred-ignors> ^text |Human ignors Sweetie. He did not answer questions.|)
}

# detect ignorance
sp {talk-llm*propose*add-ignor-statements
	(state <s> ^bottom-state 1 ^beliefs <b> ^events <ev-pool>)
	(<b> ^event <ev1>)
	(<ev1> ^name talk-no-answer ^object <obj> ^initiated-at <t1>)
	(<ev-pool> ^event {<> <ev1> <ev2>} {<> <ev1> <ev2> <ev3>})
	(<ev2> ^name {<<|talk-ignored| |talk-no-answer|>>} ^object <obj> ^initiated-at <t2>)
	(<ev3> ^name {<<|talk-ignored| |talk-no-answer|>>} ^object <obj> ^initiated-at {< <t2> <t3>})
	-{(<ev-pool> ^event <ev3>)
	  (<ev3> ^name talk-heard  ^object <obj> ^initiated-at {< <t1> > <t3>})
	}
	-{(<b> ^predicate <pred>)
	  (<pred> ^name ignors-me ^actor <obj>)
	} 
-->
	(<s> ^operator <op> +, =)
	(<op> ^name add-ignors-me ^type cognition automatic ^add-predicate <pred-ignors>)
	(<pred-ignors> ^name ignors-me ^actor <obj> ^deadline-time 120.0)
	(<pred-ignors> ^text |Human ignored Sweetie. He did not participate in dialog.|)
}

#
# COGNITION: ponies, gestures 
#

# detect plusie
sp {talk-llm*elaborate*speaker-gesture
	(state <s> ^top-state 1  ^beliefs <b>)
	(<b> ^object <obj> ^process <proc>)
	(<obj> ^type hand ^label {<<|brohoof| |hand_greeting|>>} ^input-link <il>)
	(<il> ^visible now ^yaw-head center)
	(<proc> ^substate talk-llm ^object <speaker>)
-->
	(<b> ^predicate <pred>)
	(<pred> ^name greet-us-with-gesture ^actor <speaker>)
	(<pred> ^text |Human greets Sweetie with gesture.|)
}

sp {talk-llm*elaborate*speaker-pony
	(state <s> ^top-state 1  ^beliefs <b>)
	(<b> ^object <obj> ^process <proc>)
	(<obj> ^type pony  ^input-link <il>)
	(<il> ^visible now ^yaw-head center)
	(<proc> ^substate talk-llm ^object <speaker>)
-->
	(<b> ^predicate <pred>)
	(<pred> ^name greet-us-with-gesture ^actor <speaker>)
	(<pred> ^text |Human is holding pony plusie.|)
}


