# ASK SUBSTATE
#  
# DESCRIPTION
#
# Ask question and wait responce. Do focus attention on speker.
#
# DECISION OPERATOR
#
# (<op> ^name @name@ ^substate ask ^process-args <args>)
#   (<args> ^object <obj> ^topic <topic> ^text <text> ^animation-tag <tag> ^wait-time <wait-time>)
#
# Ask person <object> about <topic> with <text> and use animation tagged with <tag>.
#
# RESULT STATUSES
#
# * succeed --- question was answered
# * failed --- unable to focus on speaker or no answer is supplied.
#
# SIDE EFFECTS
#
# Events (including relevant substates):
#
# * event (^name talk-ignored ^actor <object> ^topic <topic>) --- question was asked by object ignored it: it left, moved or did not say anything.
# * event (^name talk-answer ^actor <object> ^question-topic <topic> ^answer-topic <answer-topic> ^answer-text <text>) --- answer was detected.
# * event (^name talk-failed ^actor <object> ^topic <topic>) --- was unable to ask question (object is moving or invisble)
# * event (^name talk-said ^object <object> ^topic <topic>) --- said defined phrase to the object.
#
# Process:
#
# * process (^name asking ^substate say ^object <obj> ^topic <topic> ^text <text> ^animation-tag <tag>)
# * process (^name waiting-answer-ask ^substate look-at ^object <obj> ^topic <topic> ^deadline-time 10.0)
#

# DECISION RULES

# if question is not asked then say it and then initiate waiting-answer-ask process
sp {ask*propose*say
	(state <s> ^substate ask -^waiting-answer-ask ^args <args> ^process <sp>)
	(<args> ^object <obj> ^topic <topic> ^text <text> ^animation-tag <tag> ^wait-time <wait-time>)
-->
	(<s> ^operator <o> +, =)
	(<o> ^name asking ^substate say ^process-args <a>)
	(<a> ^object <obj> ^topic <topic> ^text <text> ^animation-tag <tag> ^result <res-succeed> ^result <res-failed>)
	(<res-succeed> ^status succeed ^add-process <proc>)
	(<proc> ^name waiting-answer-ask ^object <obj> ^question-topic <topic> ^subprocess-of <sp> ^deadline-time <wait-time>)
	(<res-failed> ^status failed ^remove-process <sp>)
}

# waiting for answer: look at object. If action is failed consider question is ignored and ask process finished
sp {ask*propose*look-at-waiting
	(state <s> ^substate ask ^waiting-answer-ask <proc> ^process <sp>)
	(<proc> ^object <obj> ^question-topic <topic> ^deadline-time <timeout>)
-->
	(<s> ^operator <op> +, <)
	(<op> ^name waiting-answer-ask ^substate look-at ^process-link <proc> ^additional-process-args <a>)
	(<a> ^delay 2.0 ^timeout <timeout> ^result <res-failed>)
	(<res-failed> ^status failed ^add-event <ev-ignored> ^finish-status failed ^finish-process <sp>)
	(<ev-ignored> ^name talk-ignored ^actor <obj> ^topic <topic> ^memorization-time 3600.0)
}

# COGNITION RULES

# emit talk-ignored event if waiting answer and finish ask process
sp {ask*propose*question-is-ignored-event
	(state <s> ^bottom-state 1 ^beliefs.event <ev>)
	(<ev> ^name waiting-answer-ask ^reason deadline -^processed ask-question-is-ignored ^process <proc>)
	(<proc> ^object <obj> ^question-topic <topic> ^subprocess-of <sp>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name ask-question-is-ignored ^type cognition automatic ^add-event <ev-ignored> ^mark-processed <ev> ^finish-status failed ^finish-process <sp>)
	(<ev-ignored> ^name talk-ignored ^actor <obj> ^topic <topic> ^memorization-time 3600.0)
}

# emit talk-answered event and finish both waiting-answer and ask process
sp {ask*propose*question-is-answered-event
	(state <s> ^bottom-state 1 ^beliefs <b>)
	(<b> ^process <proc> ^event <ev>)
	(<proc> ^name waiting-answer-ask ^object <obj> ^question-topic <topic> ^subprocess-of <sp>)
	(<ev> ^name speech ^topic <answer-topic> ^text <text>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name ask-question-is-answered ^type cognition automatic ^add-event <ev-answer> ^finish-status succeed ^finish-process <proc> <sp>)
	(<ev-answer> ^name talk-answered ^actor <obj> ^question-topic <topic> ^answer-topic <answer-topic> ^answer-text <text> ^memorization-time 3600.0)
}

