#
# BELIEF MEMORY SUPPORT
#

# INITIALIZATION
sp {initialization*apply*belief-stable-pending-and-timestamp
   (state <s> ^name initialization ^operator.name initialization ^stage 2 ^beliefs <b> ^beliefs-stable <bs> ^time.now <time>)
-->
	(<bs> ^pending <p>)
	(<b> ^timestamp <time>)
	(<b> ^terminated <t> ^deadline <d> ^initiated <i>)
}

sp {initialization*apply*belief-history-timestamp
   (state <s> ^name initialization ^operator.name initialization ^stage 2 ^events <ev-pool> ^time.now <time>)
-->
	(<ev-pool> ^timestamp <time>)
}

# ELABORATIONS

# terminate time elaboration
sp {beliefs*elaborate*terminate-time
	(state <s> ^top-state 1 ^beliefs <b>)
	(<b> ^{<<|predicate| |process|>> <belief-type>} <pred>)
	(<pred> ^deadline-time <d-time> ^initiated-at <init-time>)
-->
	(<pred> ^terminate-time (+ <init-time> <d-time>))
}

# forget time elaboration 
sp {beliefs*elaborate*predicate-forget-time
	(state <s> ^top-state 1 ^predicates <pred-pool>)
	(<pred-pool> ^<pred-type> <pred>)
	(<pred> ^memorization-time <mem-time> ^terminated-at <term-time>)
-->
	(<pred> ^forget-time (+ <term-time> <mem-time>))
}

# fast access for predicate initiated/termintaed/deadline events
sp {beliefs*elaborate*predicate-events-fast-access
	(state <s> ^top-state 1 ^beliefs <b>)
	(<b> ^event <ev>)
	(<ev> ^reason <reason> ^{<<|predicate| |process|>> <belief-type>} <belief>)
-->
	(<b> ^<reason> <ev>)
}

# BELIEF CREATION DETECTION

# newly created belief does not have `^initiated-at` attribute.
sp {beliefs*propose*register-new-belief
	(state <s> ^bottom-state 1 ^beliefs <b>)
	(<b> ^{<<|event| |predicate| |process|>> <belief-type>} <belief>)
	(<belief> -^initiated-at)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name register-new-belief ^type system ^belief-type <belief-type> ^belief <belief>)
}

# make all attributes o-supported
sp {beliefs*apply*register-new-beliefs*o-support
	(state <s> ^operator <op>)
	(<op> ^name register-new-belief ^belief <belief>)
	(<belief> ^<attr> <value>)
-->
	(<belief> ^<attr> <value>)
}

# add `^initiated-at` attribute
sp {beliefs*apply*register-new-beliefs*initiated-at
	(state <s> ^operator <op> ^time.now <time>)
	(<op> ^name register-new-belief ^belief <belief>)
-->
	(<belief> ^initiated-at <time>)
}

# copy newly created belief to pending
sp {beliefs*apply*register-new-beliefs*beliefs-stable-pending
	(state <s> ^operator <op> ^beliefs-stable.pending <bs>)
	(<op> ^name register-new-belief ^belief-type {<<|predicate| |process|>> <belief-type>} ^belief <belief>)
-->
	(<bs> ^<belief-type> <belief>)
}

# generate initiated event
sp {beliefs*apply*register-new-beliefs*initiated-event
	(state <s> ^operator <op> ^beliefs <b> ^time.now <time>)
	(<op> ^name register-new-belief ^belief-type {<<|predicate| |process|>> <belief-type>} ^belief <belief>)
	(<belief> ^name <name>)
-->
	(<b> ^event <ev>)
	(<ev> ^name <name> ^reason initiated ^<belief-type> <belief> ^initiated-at <time>)
}

# copy to predicates pool
sp {beliefs*apply*register-new-beliefs*memorize-predicate
	(state <s> ^operator <op> ^predicates <pred-pool>)
	(<op> ^name register-new-belief ^belief-type {<<|predicate| |process|>> <belief-type>} ^belief <belief>)
	(<belief> ^memorization-time)
-->
	(<pred-pool> ^<belief-type> <belief>)
}

# copy to events pool
sp {beliefs*apply*register-new-beliefs*memorize-event
	(state <s> ^operator <op> ^events <ev-pool> ^time.now <time>)
	(<op> ^name register-new-belief ^belief-type event ^belief <ev>)
	(<ev> ^memorization-time <mem-time>)
-->
	(<ev-pool> ^event <ev>)
	(<ev> ^forget-time (+ <time> <mem-time>))
}

# copy to events pool
sp {beliefs*apply*register-new-belief*log
	(state <s> ^operator <op>)
	(<op> ^name register-new-belief ^belief-type <type> ^belief <belief>)
	(<belief> ^name <name>)
-->
	(log 1 (concat |REGISTER NEW | <type> | | <name> | | <belief> (crlf)))
}

# BELIEF DELETION DETECTION
# TODO: speed up? current implementation performs n^2 matches
sp {beliefs*propose*register-removed-belief
	(state <s> ^bottom-state 1 ^beliefs <b> ^beliefs-stable <bs>)
	(<bs> ^{<<|predicate| |process|>> <belief-type>} <belief>)
	(<belief> -^terminated-at)
	-(<b> ^<belief-type> <belief>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name register-removed-belief ^type system ^belief-type <belief-type> ^belief <belief>)
}

# add terminated-at attribute and generte event
sp {beliefs*apply*register-removed-beliefs*terminated-at
	(state <s> ^operator <op> ^time.now <time> ^beliefs <b>)
	(<op> ^name register-removed-belief ^belief-type <belief-type> ^belief <belief>)
	(<belief> ^name <name>)
-->
	(<belief> ^terminated-at <time>)
	(<b> ^event <ev>)
	(<ev> ^name <name> ^reason terminated ^<belief-type> <belief> ^initiated-at <time>)
	(log 1 (concat |REGISTER REMOVED | <belief-type> | | <name> | | <belief> (crlf)))
}

# PERIODIC PROCESSING

# periodic processing
# TODO: cognition cycle should be finished before `beliefs-stable` update and event removal.
# TODO: add trigger which marks cognition cycle execution 
# TODO: or use low granuality time
sp {beliefs*propose*update
	(state <s> ^bottom-state 1 ^beliefs <b> ^time.now <time>)
	(<b> ^timestamp {< <time> <ts>})
-->
	(<s> ^operator <op> +, =)
	(<op> ^name beliefs-update ^type system ^timestamp <ts> ^time <time> ^time-stable (- <time> 0.25))
}

# update timestamp
sp {beliefs*apply*update*timestamp
	(state <s> ^operator <op> ^beliefs <b>)
	(<op> ^name beliefs-update ^time <time> ^timestamp <ts>)
-->
	(<b> ^timestamp <ts> -)
	(<b> ^timestamp <time>)
}

# remove old events
sp {beliefs*apply*update*remove-events
	(state <s> ^operator <op> ^beliefs <b>)
	(<op> ^name beliefs-update ^time-stable <time>)
	(<b> ^event <ev>)
	(<ev> ^initiated-at {< <time>})
-->
	(<b> ^event <ev> -)
}

# move predicates in pending to belief-stable (if they are not terminated)
sp {beliefs*apply*update*beliefs-stable-pending
	(state <s> ^operator <op> ^beliefs-stable <bs>)
	(<op> ^name beliefs-update ^time-stable <time>)
  	(<bs> ^pending <p>) 
	(<p> ^<belief-type> <belief>)
	(<belief> ^initiated-at {< <time>})
-->
	(<p> ^<belief-type> <belief> -)
	(<bs> ^<belief-type> <belief>)
}

# remove terminated predicates from beliefs-stable
sp {beliefs*apply*update*belief-stable-remove-terminated
	(state <s> ^operator <op> ^beliefs-stable <bs>)
	(<op> ^name beliefs-update ^time-stable <time>)
	(<bs> ^<pred-type> <pred>)
	(<pred> ^terminated-at {< <time>})
-->
	(<bs> ^<pred-type> <pred> -)
}

# terminate predicates if deadline is reached
sp {beliefs*apply*update*belief-terminate-deadline
	(state <s> ^operator <op> ^beliefs <b>)
	(<op> ^name beliefs-update ^time <time>)
	(<b> ^<pred-type> <pred>)
	(<pred> ^terminate-time {<= <time>} ^name <name>)
-->
	(<b> ^<pred-type> <pred> -)
	(<pred> ^terminated-at <time>)
	(<b> ^event <ev>)
	(<ev> ^name <name> ^reason deadline ^<pred-type> <pred>)
	(log 1 (concat |DEADLINE | <pred-type> | | <name> | | <pred> (crlf)))
}

# MEMORY PERIODIC PROCESSING

# periodic processing
sp {beliefs*propose*history-update
	(state <s> ^bottom-state 1 ^events <ev-pool> ^time.now <time>)
	(<ev-pool> ^timestamp {< <time> <ts>})
-->
	(<s> ^operator <op> +, =)
	(<op> ^name beliefs-history-update ^type system ^timestamp <ts> ^time <time>)
}

# update timestamp
sp {beliefs*apply*history-update*timestamp
	(state <s> ^operator <op> ^events <ev-pool>)
	(<op> ^name beliefs-history-update ^time <time> ^timestamp <ts>)
-->
	(<ev-pool> ^timestamp <ts> -)
	(<ev-pool> ^timestamp (+ <time> 10.0))
}

# remove old events
sp {beliefs*apply*history-update*remove-events
	(state <s> ^operator <op> ^events <ev-pool>)
	(<op> ^name beliefs-history-update ^time <time>)
	(<ev-pool> ^event <ev>)
	(<ev> ^forget-time {< <time>})
-->
	(<ev-pool> ^event <ev> -)
}

# remove old predicates
sp {beliefs*apply*history-update*remove-predicates
	(state <s> ^operator <op> ^predicates <pred-pool>)
	(<op> ^name beliefs-history-update ^time <time>)
	(<pred-pool> ^<pred-type> <pred>)
	(<pred> ^forget-time {< <time>})
-->
	(<pred-pool> ^<pred-type> <pred> -)
}

