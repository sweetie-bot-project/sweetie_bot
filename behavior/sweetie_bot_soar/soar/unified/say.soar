# SAY SUBSTATE
#  
# DESCRIPTION
#
# Focus attention on speaker and say phrase, which can be accomplished with animation.
#
# DECISION OPERATOR
#
# (<op> ^name @name@ ^substate say ^object <obj> ^topic <topic> ^text <text> ^animation-tag <tag>)
#
# Say person about <topic> with <text> and using animation tagged with <tag>.
#
# RESULT STATUSES
#
# * succeed --- desired phrase is said to <object>.
# * failed --- was unable to focus on <object>.
#
# SIDE EFFECTS
#
# Events:
#
# * (^name talk-said ^object <object> ^topic <topic>) --- said to <object> about <topic>.
# * (^name talk-failed ^object <object> ^topic <topic>) --- unable to focus attention on <object>.
#
# Decisions:
#
# * (^name say ^substate say ^object <obj> ^topic <topic> ^deadline-time 2.0) --- gaze is focused on object so we can say <text>.
#

# DECISION RULES

# ENSHURE THAT OBJECT IS IN CENTER OF VIEW BEFORE ASKING

# activate LookAt flexbe behavior
sp {say*propose*look-at
	(state <s> ^substate say ^args <args>)
	(<args> ^object <obj> ^topic <topic>)
-->
	(<s> ^operator <op> +, <)
	(<op> ^name focusing-to-say ^substate look-at ^args <a>)
	(<a> ^object <obj> ^topic <topic> ^timeout 10.0 ^delay 2.0 )
}

# detect focus failed outcome: emit talk-failed event, finish process
sp {say*propose*look-at*failed
	(state <s> ^bottom-state 1 ^beliefs.event <ev>)
	(<ev> ^name focusing-to-say ^status failed ^process <proc>)
	(<proc> ^topic <topic> ^object <obj> ^subprocess-of <sp>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name say-look-at-failed ^type cognition automatic ^add-event <ev-new> ^status failed ^finish-process <sp>)
	(<ev-new> ^name talk-failed ^object <obj> ^topic <topic>)
}

# PERFORM TALK ANIMATION

# propose animations with 'talk': start flexbe behavior, add 'saying' process
sp {say*propose*select-animation
	(state <s> ^substate say -^saying ^beliefs.predicate <pred> ^args <args> ^mem.joint-trajectory <anim>)
	(<args> ^object <obj> ^topic <topic>)
	(<pred> ^name looking-at ^object <obj>)
	(<anim> ^tag talk)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name saying ^substate flexbe ^args <a> ^animation <anim>)
    (<a> ^object <obj> ^topic <topic> ^behavior ExecuteJointTrajectoryAndSay ^text <text> ^joint_trajectory <animation-name> ^text_delay 0.2)
}

# elaborate is_relative ExecuteJointTrajectoryAndSay parameter
sp {say*elaborate*say-execute-animation-is-relative
	(state <s> ^substate say ^operator <op> +)
	(<op> ^name saying ^args <args> ^animation.relative) 
-->
	(<args> ^is_relative True)
}

# if 'saying' process is active continue its execution
sp {say*propose*execute-animation
	(state <s> ^substate say ^saying <proc>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name saying-continue ^substate flexbe ^process <proc>)
}

# detect saying succeed: add talk-said event and finish prcess
sp {say*propose*saying*succeed
	(state <s> ^bottom-state 1 ^beliefs.event <ev>)
	(<ev> ^name saying ^status succeed ^process <proc>)
	(<proc> ^topic <topic> ^object <obj> ^subprocess-of <sp>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name say-saying-succeed ^type cognition automatic ^add-event <ev-new> ^status succeed ^finish-process <sp>)
	(<ev-new> ^name talk-said ^object <obj> ^topic <topic>)
}

# PREFERENCES 

# prefer animation with tag matching supplied as substate parameter
sp {say*prefer*select-animation-tag
	(state <s> ^substate say ^operator <op1> + ^operator {<> <op1> <op2>} ^superstate.operator.animation-tag <tag>)
	(<op1> ^name select-animation ^animation.tag <tag>)
	(<op2> ^name select-animation ^animation <anim2>)
	(<anim2> -^tag <tag>)
-->
	(<s> ^operator <op1> > <op2>)
}

# reject animations which are not tagged as general 
sp {say*prefer*select-animation-general-tag
	(state <s> ^substate say ^operator <op> + ^superstate.operator.animation-tag <tag>)
	(<op> ^name select-animation ^animation <anim2>)
	(<anim2> -^tag <tag> -^tag general)
-->
	(<s> ^operator <op> ~)
}
