#
# PROTO2 GENERAL BEHAVIOR
#
# Implenents following drives:
#  1. movement (random animation, step-sequence-graph, random head movements).
#  2. curiosity (watch on people)
#  3. social (talk with people)
#  3. security (overheat). 
#

#
# MOVEMENT DRIVE
#

# Propose perform animation (no one around)
sp {movement*propose*decide-animation
	(state <s> ^name movement ^substate general -^performing-animation)
-->
	(<s> ^operator <op> +, =)
   	(<op> ^name performing-animation ^substate animation ^process-args <a>)
	(<a> ^tag alone ^deadline-time 30.0)
}

# invoke RandHeadMovements for random timeout instead of animation 
sp {movement*propose*rand*head*movements
	(state <s> ^name movement ^substate general -^moving-head)
-->
	(<s> ^operator <op> +, =)
   	(<op> ^name moving-head ^substate flexbe ^process-args <a> ^interruptable hard)
   	(<a> ^behavior ExecuteRandHeadMovements ^timeout (+ 5 (rand-int 15))) 
}

# wait 
sp {movement*propose*wait
	(state <s> ^name movement ^substate general ^{<<|performing-animation| |moving-head|>>} <proc>)
	(<proc> ^substate <substate>)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name wait-proccess ^substate <substate> ^drive movement ^process-link <proc>)
}

#
# CURIOSITY DRIVE
#

# SWITCH ATTENTION OVER MULTIPLE OBJECTS

sp {curiosity*propose*attention
	(state <s> ^name curiosity ^substate general ^beliefs.object <obj>)
	(<obj> ^input-link.visible now)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name look-at-multiple-objects ^substate attention ^process-args <a>)
}

#
# SOCIAL DRIVE
# 

# elaborate talking process link
sp {social*elaborate*talk
	(state <s> ^name social ^substate general ^{<<|talking-first-time| |talking-on-request| |talking-again| |mirror-gesture|>>} <proc>)
-->
	(<s> ^talking <proc>)
}

# continue talk
sp {talker*propose*talk-continue
	(state <s> ^name social ^substate general ^talking <proc>)
	(<proc> ^substate <substate>)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name talking-continue ^substate <substate> ^process-link <proc>)
}

# SELECT HUMAN TO TALK

# select stranger if we are looking at him
sp {social*propose*talk-to-stranger
	(state <s> ^name social ^substate general -^talking ^beliefs-stable.predicate <pred> ^beliefs <b>)
	(<pred> ^name looking-at ^object <obj>)
	(<obj> ^type human)
	-{(<b> ^predicate <p>) (<p> ^name acquitance ^object <obj>)}
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name talking-first-time ^substate talk ^process-args <a>)
	(<a> ^object <obj>)
}

# start talk if being greeted
sp {social*propose*talk-on-greeting
	(state <s> ^name social ^substate general -^talking ^beliefs-stable.predicate <pred> ^beliefs <b>)
	(<pred> ^name looking-at ^object <obj>)
	(<b> ^event <ev>)
	(<ev> ^name speech ^topic greeting)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name talking-on-request ^substate talk ^process-args <a>)
	(<a> ^object <obj>)
}

# select acquitance if the last greeting is expired
sp {social*propose*talk-again
	(state <s> ^name social ^substate general -^talking ^beliefs <b>)
	(<b> ^object <obj>)
	(<obj> ^type human ^input-link.visible now)
	(<b> ^predicate <pred1>)
	(<pred1> ^name acquitance ^object <obj>)
	-{(<b> ^predicate <pred2>) (<pred2> ^name greeted ^object <obj>)}
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name talking-again ^substate talk ^process-args <a>)
	(<a> ^object <obj>)
}

# mirror simple gestures
sp {social*propose*mirror-brohoof
	(state <s> ^name social ^substate general -^talking ^beliefs <b>)
	(<b> ^object <obj>)
	(<obj> ^type hand ^label brohoof -^have-response yes ^input-link.visible now)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name mirror-gesture ^substate flexbe ^process-args <a>)
	(<a> ^behavior ExecuteCompoundAction ^action_name brohoof_silent ^result <res>)
	(<res> ^status succeed ^parent <obj> ^attribute have-response ^link-value yes)
}

# mirror simple gestures
sp {social*propose*mirror-greeting
	(state <s> ^name social ^substate general -^talking ^beliefs <b>)
	(<b> ^object <obj>)
	(<obj> ^type hand ^label hand_greeting -^have-response yes ^input-link.visible now)
-->
	(<s> ^operator <o> +, =)
   	(<o> ^name mirror-gesture ^substate flexbe ^process-args <a>)
	(<a> ^behavior ExecuteJointTrajectoryAndSay ^joint_trajectory greeting2 ^text |Привет!| ^text_delay 1.0 ^result <res>)
	(<res> ^status succeed ^parent <obj> ^attribute have-response ^link-value yes)
}

# react on pony
sp {social*propose*greet-pony
	(state <s> ^name social ^substate general -^talking ^beliefs <b>)
	(<b> ^object <obj>)
	(<obj> ^type pony ^input-link.visible now)
    -{(<b> ^predicate <pred>) 
      (<pred> ^name greeted-pony ^object <obj>)	
    }
-->
	(<s> ^operator <op> +, =)
   	(<op> ^name talking-first-time ^substate ask ^process-link <a>)
    (<a> ^name talking-first-time ^substate ask ^object <obj> ^topic greet ^animation-tag greeting ^wait-time 4.0)
	(<a> ^text |Привет, пони! Ты тоже потерян в этом двуногом мире?| |О! Рада увидеть четырехного сородича!| |Привет! Как дела в Эквестрии?|)
   	#(<op> ^name talking-first-time ^substate verbolize ^process-link <a>)
	#(<a> ^name talking-first-time ^substate verbolize ^object <obj> ^topic greet ^type statement ^animation-tag greeting ^text |Привет!|)
}

# initiate greeted-pony predicate
sp {social*propose*greeted-pony-add
	(state <s> ^bottom-state 1 ^beliefs <b>)
	(<b> ^event <ev>)
	(<ev> ^name talk-said ^topic greet -^processed initiate-greeted-pony ^object <obj>)
	(<obj> ^type pony)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name initiate-greeted-pony ^type cognition automatic ^add-predicate <pred> ^mark-processed <ev>)
	(<pred> ^name greeted-pony ^object <obj>) 
}

# terminate greeted-pony predicate
sp {social*propose*greeted-pony-remove
	(state <s> ^bottom-state 1 ^beliefs.predicate <pred>)
	(<pred> ^name greeted-pony ^object.input-link <smo>)
	(<smo> -^visible now -^visible just)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name terminate-greeted-pony ^type cognition automatic ^remove-predicate <pred>)
}

# PREFERENCES

sp {social*prefer*talk-on-request
	(state <s> ^name social ^substate general ^operator <op1> + ^operator {<> <op1> <op2>} +)
	(<op1> ^name talking-on-request)
	(<op2> -^name talking-on-request -^name mirror-gesture)
-->
	(<s> ^operator <op1> > <op2>)
}

sp {social*prefer*mirror-gesture
	(state <s> ^name social ^substate general ^operator <op1> + ^operator {<> <op1> <op2>} +)
	(<op1> ^name mirror-gesture)
	(<op2> -^name mirror-gesture)
-->
	(<s> ^operator <op1> > <op2>)
}

#
# SECURITY
#

# wait until overheat is over
sp {security*propose*wait-if-overheat
	(state <s> ^name security ^substate general ^io.input-link.servos.status overheat)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name wait-overheat ^substate wait)
}

# place head in nominal position
sp {security*propose*head-to-nominal-overheat
	(state <s> ^name security ^substate general ^io.input-link <il>)
	(<il> ^servos.status overheat ^head-pose.pose {<> head_nominal})
-->
	(<s> ^operator <op> +, =)
	(<op> ^name move-head-nominal-pose ^substate flexbe ^process-args <a>)
    (<a> ^behavior ExecuteSetPose ^pose head_nominal)
}

sp {security*propose*say-overheat
	(state <s> ^name security ^substate general ^io.input-link.servos.status overheat ^beliefs <b>)
	-{(<b> ^predicate <pred>) (<pred> ^name said-about-overheat)}
-->
	(<s> ^operator <op> +, =)
	(<op> ^name say-overheat ^type automatic ^add-predicate <pred-new> ^add-output-command textcmd ^output-command-args <cmd>)
	(<pred-new> ^name said-about-overheat ^deadline-time 30.0)
	(<cmd> ^type |voice/say| ^command |Я перегрелась. Буду теперь отдыхать.|)
}

# say and pose change must be done before waiting
sp {security*prefer*wait-is-last-chioce
	(state <s> ^name security ^substate general ^operator <op1> + ^operator <op2> +)
	(<op1> ^name wait-overheat)
	(<op2> ^name {<<|move-head-nominal-pose| |say-overheat|>>})
-->
	(<s> ^operator <op1> < <op2>)
}

