# VERBOLIZE SUBSTATE
#
# DESCRIPTION
#
# Say phrase with animation.
#
# DECISION OPERATOR
#
# (<op> ^name @name@ ^substate verbolize ^process-args <args>)
#   (<args> ^object <obj> ^topic <topic> ^text <text> ^animation-tag <tag> ^emotion <emotion>
#				[^sound <sound-file>] [^scene <scene>] [^character <character>]
#				[^lang <lang>] [^type <type>])
#
# Look at person <obj> and then say about <topic> with <text> or <sound-file> using animation tagged with <tag>. 
# 
# State publishes SpeechVisualization message with attributes ^text <text>, ^sound <sound>, ^character <character>, ^scene <scene>.
#
# Set ^animation-tag to none to skip animation. Multiply ^animation-tag may be specified.
# Substate consider only animation tagged with talk tag. Animation preferences are following:
#  * two tags is matched (most preferable)
#  * one tag is matched
#  * animation have ^tag general
#
# PROCESS RESULT STATUSES
#
# * succeed --- text action succced and animation outcome is received
# * missing --- unable to focus on interlocutor
#
# SIDE EFFECTS
#
# Substates:
#
# text-action, flexbe, look-at
#
# Events:
#
# * (^name talk-said ^object <object> ^topic <topic> ^text <text>) --- said to <object> about <topic>.
#


#
# DECISION RULES
#

# LOOK AT INTERLOCUTOR BEFORE SAY ANYTHING

# focus on interlocutor before any other actions
# this operator will be active until look-at does not set status
sp {verbolize*propose*focusing-on-interlocutor
	(state <s> ^substate verbolize ^args <args> ^process <proc>)
	(<args> ^object <obj> -^skip look-at) 
	(<proc> -^focusing-on-interlocutor-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name focusing-on-interlocutor ^substate look-at ^process-args <a> ^priority 50)
    (<a> ^object <obj> ^deadline-time 5.0)
}

# detect that object in focus, procced to actual verbolization
sp {verbolize*propose*focusing-on-interlocutor-succeed
	(state <s> ^bottom-state 1 ^beliefs.predicate <pred>)
	(<pred> ^name looking-at ^object <obj> ^focusing-process.subprocess-of <proc>)
	(<proc> ^substate verbolize ^object <obj> -^focusing-on-interlocutor-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name focusing-on-interlocutor-succeed ^type cognition automatic)
    (<op> ^parent <proc> ^attribute focusing-on-interlocutor-status ^link-value succced)
}

# detect focusing has failed
sp {verbolize*propose*focusing-on-interlocutor-mssing
	(state <s> ^bottom-state 1 ^beliefs.event <ev>)
	(<ev> ^name focusing-on-interlocutor ^reason deadline ^process.subprocess-of <proc>)
	(<proc> ^substate verbolize -^focusing-on-interlocutor-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name focusing-on-interlocutor-failed ^type cognition automatic)
    (<op> ^parent <proc> ^attribute focusing-on-interlocutor-status ^link-value failed)
    (<op> ^finish-process <proc> ^finish-status missing)
}

# PERFORM TEXT ACTION

# text action: play sound file
# if text has not been verbolzed and is not being verbolized and we have not failed with sound verbolization befor
# synthesis has lower priority then predefined sounds
sp {verbolize*propose*text-action-sound
	(state <s> ^substate verbolize -^saying-text-action ^args <args> ^process <proc>)
	(<args> ^sound <file>)
	(<proc> -^text-action-status -^text-action-sound-failed)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name saying-text-action ^substate text-action ^process-args <a> ^priority 27)
    (<a> ^type |voice/play_wav| ^command <file> ^result <r-succeed> <r-failed>)
	(<r-succeed> ^status succeed ^parent <proc> ^attribute text-action-status ^link-value succeed ^add-event <ev-new>)
	(<ev-new> ^name talk-said ^memorization-time 3600.0)
	(<r-succeed> ^print (concat |TALK: text action play file: | <file> (crlf)))
	(<r-failed> ^status failed ^parent <proc> ^attribute text-action-sound-failed ^link-value yes)
}

# text action: speech synthesis
# propose it if text has not been verbolized and is not being verbolized
# synthesis has lower priority then predefined sounds
sp {verbolize*propose*text-action-text
	(state <s> ^substate verbolize -^saying-text-action ^args <args> ^process <proc>)
	(<args> ^text <text> ^lang <lang>)
	(<proc> -^text-action-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name saying-text-action ^substate text-action ^process-args <a> ^priority 25)
    (<a> ^type (concat |voice/say/| <lang>) ^command <text> ^result <r>)
	(<r> ^status succeed ^parent <proc> ^attribute text-action-status ^link-value succeed ^add-event <ev-new>)
	(<ev-new> ^name talk-said ^text <text> ^lang <lang> ^memorization-time 3600.0)
	(<r> ^print (concat |TALK: text action say: | <text> (crlf)))
}

# add ^type and ^emotion attributes to talk-said event
sp {verbolize*elaborte*text-action-result-evet-attributes
	(state <s> ^substate verbolize ^operator <op> + ^args <args>)
	(<op> ^name saying-text-action ^process-args.result.add-event <ev>)
	(<ev> ^name talk-said)
	(<args> ^{<<|emotion| |type| |topic| |object|>> <attrib>} <value>)
-->
	(<ev> ^<attrib> <value>)
}


# SEND VISUALIZATION MESSAGE

# speech visualization: construct SpeechVisualization command
sp {verbolize*propose*speech-visualization
	(state <s> ^substate verbolize ^args <args> ^process <proc>)
	(<args> ^text <text> ^object <obj> ^topic <topic>)
	(<proc> -^text-is-visualized)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name visualize-speech ^type automatic ^priority 23)
	(<op> ^parent <proc> ^attribute text-is-visualized ^link-value yes)
	(<op> ^add-output-command speech-visualization ^output-command-args <cmd>)
	(<cmd> ^text <text> ^automatic-remove yes)
}

# copy scene and character attributes
sp {verbolize*elaborate*speech-visualization-scene-character
	(state <s> ^substate verbolize ^operator <op> ^args <args>)
	(<op> ^name visualize-speech ^output-command-args <cmd>)
	(<args> ^{<<|scene| |character|>> <attr>} <value>)
-->
	(<cmd> ^<attr> <value>)
}

# copy animation-tag attributes
sp {verbolize*elaborate*speech-visualization-tags
	(state <s> ^substate verbolize ^operator <op> ^args <args>)
	(<op> ^name visualize-speech ^output-command-args <cmd>)
	(<args> ^animation-tag <value>)
-->
	(<cmd> ^tag <value>)
}

# SEND EMOTION MESSAGE

# speech visualization: construct SpeechVisualization command
sp {verbolize*propose*emotion
	(state <s> ^substate verbolize ^args <args> ^process <proc> ^mem.emotion <emotion>)
	(<proc> -^emotion-is-displayed)
	(<args> ^emotion <tag>)
	(<emotion> ^tag <tag> ^name <name>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name emotion ^type automatic ^priority 24)
	(<op> ^parent <proc> ^attribute emotion-is-displayed ^link-value yes)
	(<op> ^add-output-command textcmd ^output-command-args <cmd>)
	(<cmd> ^type |eyes/emotion| ^command <name> ^automatic-remove yes)
}

# SELECT AND PERFORM ANIMATION

# animation-tag none disables animation: succeed it immediately
sp {verbolize*propose*ditch-animation
	(state <s> ^substate verbolize -^performing-animation ^args.animation-tag none ^process <proc>)
	(<proc> -^animation-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name ditch-animation ^type automatic ^priority 40 ^parent <proc> ^attribute animation-status ^link-value succeed)
}

# propose animations and add tags
sp {verbolize*propose*animation
	(state <s> ^substate verbolize -^performing-animation)
	(<proc> -^animation-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name performing-animation ^substate movement ^process-args <a> ^priority 30)
    (<a> ^required-tag talk)
}

# map animation tags to movement tags
sp {verbolize*elaborate*animation-tags-map
    (state <s> ^substate verbolize)
-->
    (<s> ^animation-tag-map <m>)
	(<m> ^animation-tag tag ^animation-required-tag required-tag ^animation-prohibit-tag prohibit-tag)
}

sp {verbolize*elaborate*animation-tags
    (state <s> ^substate verbolize ^operator <op> + ^animation-tag-map <map> ^args.<from> <tag>)
    (<op> ^name performing-animation ^process-args <a>)
	(<map> ^<from> <to>)
-->
    (<a> ^<to> <tag>)
}

# mark animation finished when subrocess is terminated
sp {verbolize*propose*animation-is-finished
    (state <s> ^bottom-state 1 ^beliefs.event <ev>)
    (<ev> ^name performing-animation ^substate movement ^reason {<<|terminated| |rejected|>>} ^process.subprocess-of <proc>)
    (<proc> ^substate verbolize -^animation-status)
-->
    (<s> ^operator <op> +, =)
    (<op> ^name verbolize-animation-is-finished ^type cognition automatic ^parent <proc> ^attribute animation-status ^link-value succeed)
}

# WAITING
# TODO: correct implementation of parallel processe: both substates should be placed in stack

# look at speaker if animation is finished
sp {verbolize*propose*looking-at-speaker
	(state <s> ^substate verbolize -^looking-at-speaker ^process <proc>)
	(<proc> ^animation-status succeed ^object <obj>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name looking-at-speaker ^substate look-at ^process-args <a> ^priority 20)
	(<a> ^object <obj>)
}

# waiting for subprocess
sp {verbolize*propose*wait
	(state <s> ^substate verbolize)
-->
	(<s> ^operator <op> +, <)
	(<op> ^name wait ^substate wait)
}

sp {verbolize*elaborate*waiting-subprocess
	(state <s> ^substate verbolize ^{<<|performing-animation| |looking-at-speaker| |saying-text-action|>>} <proc> ^operator <op> +)
	(<op> ^name wait ^substate wait)
-->
	(<op> ^process <proc>)
}

# PREFERENCES
#
# Utility:
# focus on speaker --- 50
# ditch aniamtion --- 40
# perform aniamtion -- 30
# perform text action --- 25
# looking at speaker --- 20
# waiting --- worst
#

# prefer operator with higher priority
sp {verbolize*prefer*priority
	(state <s> ^substate verbolize ^operator <op1> + ^operator {<> <op1> <op2>} ^args <args>)
	(<op1> ^priority <value>)
	(<op2> ^priority {< <value>})
-->
	(<s> ^operator <op1> > <op2>)
}

# COGNITION OPERTORS

# assume verbolize process finished if animation and text-action succeed
sp {verbolize*propose*terminate-verbolize
	(state <s> ^bottom-state 1 ^beliefs <b>)
	(<b> ^process <proc>)
	(<proc> ^substate verbolize ^text-action-status succeed ^animation-status)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name terminate-verbolize ^type cognition automatic ^finish-process <proc> ^finish-status succeed)
}

# terminate emotion if it is displayed
# TODO: react on event
sp {verbolize*elaborate*terminate-emotion
	(state <s> ^bottom-state 1 ^operator <op> +)
	(<op> ^name terminate-verbolize ^type cognition automatic ^finish-process <proc>)
	(<proc> ^emotion-is-displayed)
-->
	(<op> ^add-output-command textcmd ^output-command-args <cmd>)
	(<cmd> ^type |eyes/emotion| ^command normal ^automatic-remove yes)
}

#sp {verbolize*propose*on-text-action-succeed
#	(state <s> ^bottom-state 1 ^beliefs <b>)
#	(<b> ^event <ev>)
#	(<ev> ^substate text-action ^status succeed ^process.text <text>)
#	(<b> ^process <proc>)
#	(<proc> ^substate verbolize ^text <text>)
#-->
#	(<s> ^operator <op> +, =)
#	(<op> ^name on-text-action-succeed ^type cognition automatic ^parent <proc> ^attribute text-action-status ^link-value succeed)
#}
