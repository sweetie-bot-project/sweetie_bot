#
# FLEXBE SUBSTATE
#  
# Start flexbe substate.
#
# DESCRIPTION
#
# It waits or aborts for current FlexBe behavior if it presents. Then start behavior 
# with name <behavior-name> and given parameters. 
#
# To correctly deduce behavior paramters it must be registered in mem:
#
# (<s> ^mem <m>)
#   (<m> ^flexbe-command <cmd>)
#     (<cmd> ^name @BehaviorName@ ^param @param1_name@ @param2_name@ ... )
#
# DECISION OPERATOR
#
# (<op> ^name <name> ^substate flexbe ^process-args <args> [^interruptable [hard|soft]])
#   (<args> ^behavior <behavior-name> ^<parameter-name> <parameter-value> ...)
#
# PROCESS RESULT STATUSES
#
#	* FlexBe behavior outcomes (standart convention): 
#		* succeed --- FlexBe behavior finished successfully
#		* failed --- internal error (execution system failure, invalid argument)
#		* invalid_pose --- invalid starting pose, unfinished movements.
#		* aborted --- behavior is aborted by request.
#		* other outcomes depending on FlexBe behavior.
#
# SIDE EFFECTS
#
#	* event(^name error ^type failed ^subsystem flexbe) --- added on "failed" result
#	* event(^name error ^type invalid_pose ^subsystem flexbe) --- added on "invalid_pose" result
#



# ELABORATIONS

# add process if any action is performed
sp {flexbe*elaborate*add-porcess
	(state <s> ^substate flexbe ^process-status pending ^operator <op> + ^process <proc>)
	(<op> ^name {<<|start-behavior| |abort-behavior|>>})
-->
	(<op> ^type automatic ^add-process <proc>)
}

sp {flexbe*elaborate*interruptable
	(state <s> ^substate flexbe ^superstate.operator.interruptable <mode>)
-->
	(<s> ^interruptable <mode>)
}

# DECISIONS

# flexbe cmd in output link is present but not related to active process
# check if behavior is interruptable and abort it it is possible
sp {flexbe*propose*abort
	(state <s> ^substate flexbe ^process <proc> ^io.output-link.flexbe <cmd>)
	(<cmd> ^process {<> <proc>} ^interruptable {<< hard soft >> <abort-type>} -^abort)
-->
	(<s> ^operator <op> +)
	(<op> ^name abort-behavior ^type automatic ^parent <cmd> ^attribute abort ^link-value <abort-type> ^print |Abort behavior|)
}


# propose start flexbe behavior if no flexbe is running
sp {flexbe*propose*start*behavior
	(state <s> ^substate flexbe  ^io.output-link <ol> ^args.behavior <bh>)
	(<ol> -^flexbe)
-->
	(<s> ^operator <op> +)
	(<op> ^name start-behavior ^behavior <bh> ^param <p>)
}

# copy behavior params mentioned in flexbe command description
sp {flexbe*elaborate*behavior-params-flexbe-cmd
	(state <s> ^substate flexbe ^operator <op> + ^args <args> ^mem.flexbe-command <cmd>)
	(<op> ^name start-behavior ^behavior <name> ^param <p>)
	(<cmd> ^name <name> ^param <attr>)
	(<args> ^<attr> <value>)
-->
	(<p> ^<attr> <value>)
}

# create output link command
sp {flexbe*apply*start-behavior
	(state <s> ^substate flexbe ^operator <op> -^interruptable ^io.output-link <ol> ^process <proc>)
	(<op> ^name start-behavior ^behavior <bh> ^param <p>)
-->
	(<ol> ^flexbe <cmd>)
	(<cmd> ^name <bh> ^param <p>)
	(<cmd> ^process <proc>)
	(write |Execute FlexBe behavior | <bh> (crlf))
}

sp {flexbe*apply*start-behavior-intrruptable
	(state <s> ^substate flexbe ^operator <op> ^interruptable <mode> ^io.output-link <ol> ^process <proc>)
	(<op> ^name start-behavior ^behavior <bh> ^param <p>)
-->
	(<ol> ^flexbe <cmd>)
	(<cmd> ^name <bh> ^param <p> ^interruptable <mode>)
	(<cmd> ^process <proc>)
	(write |Execute FlexBe behavior | <bh> (crlf))
}
	
# wait flexbe behavior 
sp {flexbe*propose*wait 
	(state <s> ^substate flexbe)
-->
	(<s> ^operator <op> +, <)
	(<op> ^name flexbe-wait-cmd ^substate wait)
}

#sp {flexbe*apply*wait-debug
#	(state <s> ^substate flexbe ^operator <op> ^io.output-link.flexbe <cmd>)
#	(<op> ^name flexbe-wait-cmd ^substate wait)
#	(<cmd> -^status)
#-->
#	(<cmd> ^status succeed)
#}

# COGNITION

# cognition completion operator: finish process with coresponding status and remove cmd
sp {flexbe*propose*complete
	(state <s> ^bottom-state 1 ^io.output-link <ol>)
	(<ol> ^flexbe <cmd>)
	(<cmd> ^status <status> ^process <proc>)
-->
	(<s> ^operator <op> +)
	(<op> ^name flexbe-complete ^type automatic cognition ^finish-status <status> ^finish-process <proc>)
	(<op> ^parent <ol> ^attribute flexbe ^remove-value <cmd>)
	(<op> ^print (concat |Flexbe: complete behavior with status | <status> (crlf)))
}

# elaborate add-events commands for failed and invalid_pose outcome
sp {flexbe*elaborate*complete-events
	(state <s> ^bottom-state 1 ^operator <op> +)
	(<op> ^name flexbe-complete ^finish-status {<<|failed| |invalid_pose|>> <status>})
-->
	(<op> ^add-event <ev>)
	(<ev> ^name error ^subsystem flexbe ^type <status>)
}

# abort flexbe if process is removed
sp {flexbe*propose*abort-on-process-removal
	(state <s> ^bottom-state 1 ^beliefs.event <ev> ^io.output-link.flexbe <cmd>)
	(<cmd> ^interruptable {<< hard soft >> <abort-type>} -^abort ^process <proc>)
	(<ev> ^reason {<<|terminated| |deadline|>>} ^process <proc>)
-->
	(<s> ^operator <op> +)
	(<op> ^name flexbe-abort-behavior-on-process-removal ^type cognition automatic ^parent <cmd> ^attribute abort ^link-value <abort-type>)
}

