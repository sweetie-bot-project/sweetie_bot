# FLEXBE SUBSTATE
#  
# DECISION OPERATOR
#
# (<op> ^name <name> ^substate flexbe ^args <args> [^interruptable [hard|soft]])
#   (<args> ^behavior <behavior-name> ^param <parameter-name> ^<parameter-name> <parameter-value>)
#
# DESCRIPTION
#
# It waits or aborts for current FlexBe behavior if it presents. Then start behavior 
# with name <behavior-name> and given parameters. 
#
# RESULT STATUSES:
#	* FlexBe behavior outcomes (standart convention): 
#		* succeed --- FlexBe behavior finished successfully
#		* failed --- internal error (execution system failure, invalid argument)
#		* invalid_pose --- invalid starting pose, unfinished movements.
#		* aborted --- behavior is aborted by request.
#		* other outcomes depending on FlexBe behavior.
#
# SIDE EFFECTS
#
#	* event(^name error ^type failed ^subsystem flexbe) --- added on "failed" result
#	* event(^name error ^type invalid_pose ^subsystem flexbe) --- added on "invalid_pose" result


# START BEHAVIOR

# propose start flexbe behavior if no flexbe is running
sp {flexbe*propose*start*behavior
	(state <s> ^substate flexbe  ^io.output-link <ol> ^args.behavior <bh> ^process <proc>)
	(<ol> -^flexbe)
-->
	(<s> ^operator <op> +)
	(<op> ^name flexbe-start-behavior ^behavior <bh> ^param <p> ^type automatic ^add-process <proc>)
}

# copy behavior params mentioned under ^param attribute
sp {flexbe*elaborate*behavior-params
	(state <s> ^substate flexbe ^operator <op> + ^args <args>)
	(<op> ^name flexbe-start-behavior ^param <p>)
	(<args> ^param ^<attr> <value>)
-->
	(<p> ^<attr> <value>)
}

# copy behavior params mentioned in flexbe command description
sp {flexbe*elaborate*behavior-params-flexbe-cmd
	(state <s> ^substate flexbe ^operator <op> + ^args <args> ^mem.flexbe-command <cmd>)
	(<op> ^name flexbe-start-behavior ^behavior <name> ^param <p>)
	(<cmd> ^name <name> ^param <attr>)
	(<args> ^<attr> <value>)
-->
	(<p> ^<attr> <value>)
}

# create output link command
sp {flexbe*apply*start*behavior
	(state <s> ^substate flexbe ^operator <op> ^io.output-link <ol> ^process <proc>)
	(<op> ^name flexbe-start-behavior ^behavior <bh> ^param <p>)
-->
	(<ol> ^flexbe <cmd>)
	(<cmd> ^name <bh> ^param <p>)
	(<cmd> ^process <proc>)
	(write |Execute FlexBe behavior | <bh> (crlf))
}

# interruptability of flexbe command
sp {flexbe*elaborate*interruptability
	(state <s> ^substate flexbe ^process <proc> ^superstate.operator.interruptable <mode> ^io.output-link.flexbe <cmd>)
	(<cmd> ^process <proc>)
-->
	(<cmd> ^interruptable <mode>)
}

# WAIT BEHAVIOR
	
# wait flexbe behavior 
sp {flexbe*propose*wait 
	(state <s> ^substate flexbe)
-->
	(<s> ^operator <op> +, <)
	(<op> ^name flexbe-wait-cmd ^substate wait)
}

#sp {flexbe*apply*wait-debug
#	(state <s> ^substate flexbe ^operator <op> ^io.output-link.flexbe <cmd>)
#	(<op> ^name flexbe-wait-cmd ^substate wait)
#	(<cmd> -^status)
#-->
#	(<cmd> ^status succeed)
#}

# COMPLETE BEHAVIOR

# cognition completion operator: finish process with coresponding status
sp {flexbe*propose*complete
	(state <s> ^bottom-state 1 ^io.output-link.flexbe <cmd>)
	(<cmd> ^status <status> ^process <proc>)
-->
	(<s> ^operator <op> +)
	(<op> ^name flexbe-complete ^substate flexbe ^cmd <cmd> ^type automatic cognition ^finish-status <status> ^finish-process <proc>)
}

# elaborate add-events commands for failed and invalid_pose outcome
sp {flexbe*elaborate*complete-events
	(state <s> ^bottom-state 1 ^operator <op> +)
	(<op> ^name flexbe-complete ^status {<<|failed| |invalid_pose|>> <status>})
-->
	(<op> ^add-event <ev>)
	(<ev> ^name error ^subsystem flexbe ^type <status>)
}

sp {flexbe*apply*complete*remove-command
	(state <s> ^bottom-state 1 ^operator <op> ^io.output-link <ol>)
	(<op> ^name flexbe-complete ^substate flexbe ^finish-status <status> ^cmd <cmd>)
	(<ol> ^flexbe <cmd>)
-->
	(<ol> ^flexbe <cmd> -)
	(write |Flexbe: complete behavior with status | <status> (crlf))
}

# BEHAVIOR CONFLICT

# flexbe cmd in output link is present but not related to active process
# check if behavior is interruptable and abort it if it is possible
sp {flexbe*propose*abort
	(state <s> ^substate flexbe ^process-status pending ^io.output-link.flexbe <cmd>)
	(<cmd> ^interruptable {<< hard soft >> <abort-type>} -^abort)
-->
	(<s> ^operator <op> +)
	(<op> ^name abort-behavior ^cmd <cmd> ^abort <abort-type>)
}

sp {flexbe*apply*abort
	(state <s> ^substate flexbe ^operator <op>)
	(<op> ^name abort-behavior ^cmd <cmd> ^abort <abort-type>)
-->
	(<cmd> ^abort <abort-type>)
}
