# STEP SEQUENCE GRAPH SUBSTATE
#
# Walk along directed graph of step sequences. 
#
# DECISION OPERATOR
#
# (<op> ^name @name@ ^substate step-sequence-graph)
#
# Use ^deadline-time attribute to limit duration.
#
# DESCRIPTION
#
# Walk along directed graph of step sequences. Step sequences are stored in ^mem 
# connected by ^next attribute. Enter point is marked with ^enter-point yes.
#
# PROCESS RESULT STATUSES
#
# Does not finish process or produce result statate. Use ^deadline-time attribute to limit duration.
#
# SIDE EFFECTS
#
#
# * process (^name executing-step-sequence ^substate flexbe) --- ExecuteStepSequence flexbe behavior.
# * predicate (^name step-sequence-position ^step-sequence <step-sequence>) --- the last executed step sequence.
#

# 
# ELABORATIONS
#

sp {step-sequence*elaborate*next-step-sequnce
	(state <s> ^substate step-sequence-graph ^beliefs.predicate <pred>)
	(<pred> ^name step-sequence-position ^step-sequence <seq>)
	(<seq> ^next <next-seq>)
-->
	(<s> ^step-sequence-next <next-seq>)
	(<s> ^step-sequence-origin next)
} 

sp {step-sequence*elaborate*enter-step-sequnce
	(state <s> ^substate step-sequence-graph -^step-sequence-origin next ^mem.step-sequence <seq>)
	(<seq> ^enter-point yes)
-->
	(<s> ^step-sequence-next <seq>)
	(<s> ^step-sequence-origin enter)
} 

#
# COGNITION
# 

sp {step-sequence*propose*start-movement-along-graph
	(state <s> ^bottom-state 1 ^beliefs.event <ev> ^beliefs <b> ^mem <m>)
	(<ev> ^name executing-step-sequence ^status succeed ^reason terminated ^process.action_name <step-seq-name> -^processed register-movement-along-graph)
    -{(<b> ^predicate <pred>)
	(<pred> ^name step-sequence-position)}
	(<m> ^step-sequence <seq>)
	(<seq> ^enter-point yes ^name <step-seq-name>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name register-movement-along-graph ^type cognition automatic ^add-predicate <pred> ^mark-processed <ev>)
	(<pred> ^name step-sequence-position ^step-sequence <seq>)
}

sp {step-sequence*propose*end-movement-along-graph
	(state <s> ^bottom-state 1 ^beliefs.event <ev> ^beliefs.predicate <pred>)
	(<ev> ^name executing-step-sequence ^status succeed ^reason terminated ^process.action_name <step-seq-name> -^processed register-movement-along-graph)
	(<pred> ^name step-sequence-position ^step-sequence <prev-pose>)
	-{(<prev-pose> ^next <next-pose>)
	(<next-pose> ^name <step-seq-name>)}
-->
	(<s> ^operator <op> +, =)
	(<op> ^name register-movement-along-graph ^type cognition automatic ^remove-predicate <pred> ^mark-processed <ev>)
}

sp {step-sequence*propose*register-movement-along-graph
	(state <s> ^bottom-state 1 ^beliefs.event <ev> ^beliefs.predicate <pred>)
	(<ev> ^name executing-step-sequence ^status succeed ^reason terminated ^process.action_name <step-seq-name> -^processed register-movement-along-graph)
	(<pred> ^name step-sequence-position ^step-sequence <prev-pose>)
	(<prev-pose> ^next <next-pose>)
	(<next-pose> ^name <step-seq-name>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name register-movement-along-graph ^type cognition automatic ^parent <pred> ^attribute step-sequence ^remove-value <prev-pose> ^link-value <next-pose> ^mark-processed <ev>)
}

#
# DECISION OPERATORS
#

# start next step sequence
sp {step-sequence*propose*executing-step-sequence
	(state <s> ^substate step-sequence-graph -^executing-step-sequence ^step-sequence-next <seq>)
	(<seq> ^name <step-seq-name>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name executing-step-sequence ^substate flexbe ^process-args <a>)
   	(<a> ^behavior ExecuteStepSequence ^action_name <step-seq-name>)
}

# wait step sequence
sp {step-sequence*propose*wait-step-sequence
	(state <s> ^substate step-sequence-graph ^executing-step-sequence <proc>)
-->
	(<s> ^operator <op> +, =)
	(<op> ^name waiting-step-sequence-graph ^substate flexbe ^process-link <proc>)
}


