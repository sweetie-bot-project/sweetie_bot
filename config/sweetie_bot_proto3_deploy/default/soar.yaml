soar:
    update_period: 0.2
    autostart: false
    agent_package: "sweetie_bot_soar"
    agent_file: "soar/unified-proto3.soar"
    # agent_file: "soar/test_llm.soar"
    input:
        rand:
            type: "rand"
        clock:
            type: "clock"
            just_delay: 15.0
            recently_delay: 120.0
            long_time_delay: 3600.0
        joystick:
            type: "joystick"
            topic: "/hmi/joy_decoder/keys_pressed"
            last_activity_bins_map: { names: [ "now", "recently", "long-time" ], values: [ 10.0, 300.0] }
        swm:
            type: "swm"
            topic: "detections"
            timeout: 600
            visibility_timeout: 2
            world_frame: "odom_combined"
            body_frame: "base_link"
            head_frame: "head_link4"
            distance_bins_map: { names: [ "close", "near", "far" ], values: [ 0.3, 3.0] }
            yaw_bins_map: { names: [ "right", "center", "left" ], values: [ -0.52, 0.52] }
            time_bins_map: { names: [ "now", "just", "recently", "long-time" ], values: [ 2.0, 10.0, 120.0] }
        body-pose:
            type: "pose_joints"
            topic: "joint_states"
            storage_ns: "saved_msgs"
            pose_list: [ "body_nominal", "body_crouched" ]
            tolerance: 0.174 # 10 degrees
            time_bins_map: { names: [ "recently", "long-time" ], values: [ 60.0 ] }
        head-pose:
            type: "pose_joints"
            topic: "joint_states"
            storage_ns: "saved_msgs"
            pose_list: [ "head_nominal" ]
            tolerance: 0.174 # 10 degrees
            time_bins_map: { names: [ "recently", "long-time" ], values: [ 60.0 ] }
        battery:
            type: "battery"
            topic: "battery_state"
            level_bins_map: { names: [ "critical", "low", "normal" ], values: [ 3.0, 15.0 ] }
        servos:
            type: "herkulex_servos"
            topic: "motion/herkulex/servo_states"
            overheat_temperature: 83.0
            ignore_joints: [ 'head_joint1', 'ear_r_joint', 'ear_l_joint', 'mouth_joint' ]
        sound:
            type: "sound_speech"
            topic: "sound_event"
            speech_timeout: 2.5
            intensity_bins_map: { names: [ "low", "med", "high" ], values: [ 10.0, 20.0 ] }
            lang_filter: ['en', 'zh']
            map_parsers:
                'en': 
                    nlp_model: 'en_core_web_sm'
                    map:
                        greeting: [hello, hi, greet]
                        goodbye: [goodbye, bye]
                        dance: [dance]
                        sing: [sing]
                        please: [please]
                        give: [give]
                        hoof: [hoof, hand, leg, hooves]
                'zh':
                    nlp_model: 'en_core_web_sm'
                    map:
                        greeting: [hello, hi, greet]
                        goodbye: [goodbye, bye]
                        dance: [dance]
                        sing: [sing]
                        please: [please]
                        give: [give]
                        hoof: [hoof, hand, leg, hooves]
                # 'ru':
                #     nlp_model: 'en_core_web_sm'
                #     map:
                #         greeting: [hello, hi, greet]
                #         goodbye: [goodbye, bye]
                #         dance: [dance]
                #         sing: [sing]
                #         please: [please]
                #         give: [give]
                #         hoof: [hoof, hand, leg, hooves]
    output:
        nop:
            delay: 0.2
        textcmd: 
            topic: "control"
        flexbe:
            action_ns: "flexbe/flexbe/execute_behavior"
        text-action:
            action_ns: "voice/syn"
        speech-visualization:
            topic: "hmi/speech_visualization"
        lang-model:
            service_ns: "llm_request"
            requests:
                'complex-en':
                    prompt_header_names: [ "complex-en" ]
                    personality_names: [ "Sweetie Bot" ]
                    prompt_fact_templates:
                        'talk-heard': [ "Human says \"{text}\"\n"  ]
                        'talk-said': [ "Sweetie says \"{text}\"\n" ]
                        'talk-ignored': [ "Human do not answer.\n" ]
                        'talk-no-answer': [ "Human says nothing.\n" ]
                        'talk-illegible': [ "Human says something illegible.\n" ]
                    max_events: 5
                    max_predicates: 5
                    llm_profile_name: 'en'
                    attrib_requests:
                        - type: 'map'
                          nlp_model: 'en_core_web_sm'
                          map:
                            love: [ 'love' ]
                            joy: [ 'joy', 'happy', 'happiness' ]
                            surprise: [ 'surprise' ]
                            neutral: [ 'neutral', 'indifference', 'nothing', 'none' ]
                            sad: [ 'sad', 'sadness' ]
                            fear: [ 'fear', 'scared', 'scary', 'fright' ]
                            anger: [ 'anger', 'angry', 'mad', 'unhappy', 'fury', 'furious' ]
                          attrib: 'emotion'
                          prompt: "Sweetie thinks about human's answer and the emotion she feels is "
                          leading_text: "The emotion Sweetie feels is "
                          stop_list: ['.', '!', "\n"]
                        - type: 'classification'
                          classification_model: 'bert_sentiment'
                          attrib: 'additional_emotion'
                          fallback_value: 'neutral'
                          leading_text: ''
                          merge_map:
                            love: [ 'love' ]
                            joy: [ 'neutral', 'joy', ]
                            surprise: [ 'neutral', 'surprise' ]
                            neutral: [ 'neutral', 'surprise', 'fear', 'sad' ]
                            sad: [ 'neutral', 'sad', ]
                            fear: [ 'neutral', 'fear' ]
                            anger: [ 'anger' ]
                        - type: 'regex'
                          regexes: ['(?P<result>[^"]+)"']
                          prompt: 'Sweetie says "'
                          stop_list: ["\n", "\\n"]
                        - type: 'regex-test'
                          regex: ".*\\?.*"
                          attrib: 'sentence-type'
                          value_match: 'question'
                          value_nomatch: 'statement'
                          stop_list: ["\n"]
                'simple-en':
                    prompt_header_names: [ "simple-en", "simple-en-personality-1", "simple-en-personality-2" ]
                    personality_names: [ "Sweetie Bot", "Princess Celestia", "Crazy Head" ]
                    prompt_fact_templates:
                        'talk-heard': [ "Human: {text}\n\r"  ]
                        'talk-said': [ "My emotion: {emotion} | Sweetie Bot: {text}\n\r\n\r", "My emotion: {emotion} | Princess Celestia: {text}\n\r\n\r", "My emotion: {emotion} | Crazy Head: {text}\n\r\n\r"]
                        'talk-ignored': [ "Human: Human do not answer.\n\r", "Human: Human stays silent.\n\r", "Human: Human continues to stay silent.\n\r" ]
                        'talk-no-answer': [ "Human: Human stays silent.\n\r", "Human: Human continues to stay silent.\n\r" ]
                        'talk-illegible': [ "Human: Answer not recognized.\n\r" ]
                    max_events: 6
                    max_predicates: 0
                    start_event_history_with_heard: true
                    llm_profile_name: 'en'
                    attrib_requests:
                        - type: 'regex'
                          prompt: "My emotion: "
                          #regex: '\s*(?P<emotion_raw>\w+)\s*[|;]\s*Sweetie Bot: (?P<result>.*)'
                          regexes: ['[^|]*\|\s*[Ss]weetie\s+[Bb]ot:\s*(?P<result>.*)', '[^|]*\|\s*[Pp]rincess\s+[Cc]elestia:\s*(?P<result>.*)', '[^|]*\|\s*[Cc]razy\s+[Hh]ead:\s*(?P<result>.*)']
                          stop_list: ["\n"]
                        - type: 'map'
                          nlp_model: 'en_core_web_sm'
                          attrib: 'emotion'
                          fallback_value: 'neutral'
                          leading_text: ''
                          map:
                            love: [ 'love' ]
                            joy: [ 'joy', 'happy', 'happiness' ]
                            surprise: [ 'surprise' ]
                            neutral: [ 'neutral', 'indifference', 'nothing', 'none' ]
                            sad: [ 'sad', 'sadness' ]
                            fear: [ 'fear', 'scared', 'scary', 'fright' ]
                            anger: [ 'anger', 'angry', 'mad', 'unhappy', 'fury', 'furious' ]
                        - type: 'classification'
                          classification_model: 'bert_sentiment'
                          attrib: 'additional_emotion'
                          fallback_value: 'neutral'
                          leading_text: ''
                          merge_map:
                            love: [ 'love' ]
                            joy: [ 'neutral', 'joy', ]
                            surprise: [ 'neutral', 'surprise' ]
                            neutral: [ 'neutral', 'surprise', 'fear', 'sad' ]
                            sad: [ 'neutral', 'sad', ]
                            fear: [ 'neutral', 'fear' ]
                            anger: [ 'anger' ]
                        - type: 'regex-test'
                          regex: ".*\\?.*"
                          attrib: 'sentence-type'
                          value_match: 'question'
                          value_nomatch: 'statement'
                'failsafe-en':
                    prompt_header_names: [ "failsafe-en", "failsafe-en-personality-1", "failsafe-en-personality-2"  ]
                    personality_names: [ "Sweetie Bot", "Princess Celestia", "Crazy Head" ]
                    prompt_fact_templates:
                        'talk-heard': [ "Human: {text}\n\r"  ]
                        'talk-said': [ "My emotion: {emotion} | Sweetie Bot: {text}\n\r\n\r", "My emotion: {emotion} | Princess Celestia: {text}\n\r\n\r", "My emotion: {emotion} | Crazy Head: {text}\n\r\n\r" ]
                        'talk-ignored': [ "Human: Human do not answer.\n\r", "Human: Human stays silent.\n\r", "Human: Human continues to stay silent.\n\r" ]
                        'talk-no-answer': [ "Human: Human stays silent.\n\r", "Human: Human continues to stay silent.\n\r" ]
                        'talk-illegible': [ "Human: Answer not recognized.\n\r" ]
                    max_events: 3
                    max_predicates: 0
                    start_event_history_with_heard: true
                    llm_profile_name: 'en'
                    attrib_requests:
                        - type: 'regex'
                          prompt: "My emotion: "
                          #regex: '\s*(?P<emotion_raw>\w+)\s*[|;]\s*Sweetie Bot: (?P<result>.*)'
                          regexes: ['[^|]*\|\s*[Ss]weetie\s+[Bb]ot:\s*(?P<result>.*)', '[^|]*\|\s*[Pp]rincess\s+[Cc]elestia:\s*(?P<result>.*)', '[^|]*\|\s*[Cc]razy\s+[Hh]ead:\s*(?P<result>.*)']
                          stop_list: ["\n"]
                        - type: 'map'
                          nlp_model: 'en_core_web_sm'
                          attrib: 'emotion'
                          fallback_value: 'neutral'
                          leading_text: ''
                          map:
                            love: [ 'love' ]
                            joy: [ 'joy', 'happy', 'happiness' ]
                            surprise: [ 'surprise' ]
                            neutral: [ 'neutral', 'indifference', 'nothing', 'none' ]
                            sad: [ 'sad', 'sadness' ]
                            fear: [ 'fear', 'scared', 'scary', 'fright' ]
                            anger: [ 'anger', 'angry', 'mad', 'unhappy', 'fury', 'furious' ]
                        - type: 'classification'
                          classification_model: 'bert_sentiment'
                          attrib: 'additional_emotion'
                          fallback_value: 'neutral'
                          leading_text: ''
                          merge_map:
                            love: [ 'love' ]
                            joy: [ 'neutral', 'joy', ]
                            surprise: [ 'neutral', 'surprise' ]
                            neutral: [ 'neutral', 'surprise', 'fear', 'sad' ]
                            sad: [ 'neutral', 'sad', ]
                            fear: [ 'neutral', 'fear' ]
                            anger: [ 'anger' ]
                        - type: 'regex-test'
                          regex: ".*\\?.*"
                          attrib: 'sentence-type'
                          value_match: 'question'
                          value_nomatch: 'statement'
