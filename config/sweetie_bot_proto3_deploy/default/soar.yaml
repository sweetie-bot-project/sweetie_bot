soar:
    update_period: 0.2
    autostart: false
    agent_package: "sweetie_bot_soar"
    agent_file: "soar/unified-proto3.soar"
    # agent_file: "soar/test_llm.soar"
    input:
        rand:
            type: "rand"
        clock:
            type: "clock"
            just_delay: 15.0
            recently_delay: 120.0
            long_time_delay: 3600.0
        joystick:
            type: "joystick"
            topic: "/hmi/joy_decoder/keys_pressed"
            last_activity_bins_map: { names: [ "now", "recently", "long-time" ], values: [ 10.0, 300.0] }
        swm:
            type: "swm"
            topic: "detections"
            timeout: 600
            visibility_timeout: 2
            world_frame: "odom_combined"
            body_frame: "base_link"
            head_frame: "head_link4"
            distance_bins_map: { names: [ "close", "near", "far" ], values: [ 0.3, 3.0] }
            yaw_bins_map: { names: [ "right", "center", "left" ], values: [ -0.52, 0.52] }
            time_bins_map: { names: [ "now", "recently", "long-time" ], values: [ 2.0, 120.0] }
        body-pose:
            type: "pose_joints"
            topic: "joint_states"
            storage_ns: "saved_msgs"
            pose_list: [ "body_nominal", "body_crouched" ]
            tolerance: 0.174 # 10 degrees
            time_bins_map: { names: [ "recently", "long-time" ], values: [ 60.0 ] }
        head-pose:
            type: "pose_joints"
            topic: "joint_states"
            storage_ns: "saved_msgs"
            pose_list: [ "head_nominal" ]
            tolerance: 0.174 # 10 degrees
            time_bins_map: { names: [ "recently", "long-time" ], values: [ 60.0 ] }
        battery:
            type: "battery"
            topic: "battery_state"
            level_bins_map: { names: [ "critical", "low", "normal" ], values: [ 3.0, 15.0 ] }
        servos:
            type: "herkulex_servos"
            topic: "motion/herkulex/servo_states"
            overheat_temperature: 83.0
        sound:
            type: "sound_speech"
            topic: "sound_event"
            speech_timeout: 1.5
            intensity_bins_map: { names: [ "low", "med", "high" ], values: [ 10.0, 20.0 ] }
            lang_filter: ['en', 'ja']
            map_parsers:
                'en': 
                    nlp_model: 'en_core_web_sm'
                    map: 
                        greeting: [hello, hi, greet]
                        goodbye: [goodbye, bye]
                        dance: [dance]
                        sing: [sing]
                'ja': 
                    nlp_model: 'en_core_web_sm'
                    map: 
                        greeting: [hello, hi, greet]
                        goodbye: [goodbye, bye]
                        dance: [dance]
                        sing: [sing]
    output:
        nop:
            delay: 0.2
        textcmd: 
            topic: "control"
        flexbe:
            action_ns: "flexbe/flexbe/execute_behavior"
        text-action:
            action_ns: "voice/syn"
        speech-visualization:
            topic: "hmi/speech_visualization"
        lang-model:
            service_ns: "llm_request"
            requests:
                'complex-en':
                    prompt_header: "Human talks with pony robot Sweetie. "
                    prompt_fact_templates:
                        'talk-heard': [ "Human says \"{text}\"\n"  ]
                        'talk-said': [ "Sweetie says \"{text}\"\n" ]
                        'talk-ignored': [ "Human do not answer.\n" ]
                        'talk-no-answer': [ "Human says nothing.\n" ]
                        'talk-illegible': [ "Human says something illegible.\n" ]
                    max_events: 5
                    max_predicates: 5
                    llm_profile: 'en'
                    attrib_requests:
                        - type: 'map'
                          nlp_model: 'en_core_web_sm'
                          map: 
                            anger: [ 'anger' ]
                            happy: [ 'happiness', 'love', 'happy' ]
                            neutral: [ 'indifference', 'neutral', 'nothing' ]
                            sad: [ 'sadness', 'sad' ]
                            scared: [ 'scary', 'fright' ]
                          attrib: 'emotion'
                          prompt: "Sweetie thinks about human's answer and the emotion she feels is "
                          stop_list: ['.', '!', "\n", "\\n"]
                        - type: 'regex'
                          regex: '(?P<result>[^"]+)"'
                          prompt: 'Sweetie says "'
                          stop_list: ["\n", "\\n"]
                        - type: 'regex-test'
                          regex: ".*\\?.*"
                          attrib: 'sentence-type'
                          value_match: 'question'
                          value_nomatch: 'statement'
                          stop_list: ["\n", "\\n"]
                'simple-en':
                    prompt_header: " This is conversation with Sweetie Bot. Sweetie Bot is female unicorn pony robot from Equestria magical land. Sweetie Bot is designed to be able to carry on a conversation with Human by answering questions. Overall, Sweetie Bot is helpful, friendly, very creative and good at writing and never fails to answer.\n\nSweetie Bot has emotion state from following list: angry, happy, neutral. Emotion is inferred from the tone of the question by Human. Sweetie Bot more biased towards expression of happy emotion. Examples:\n```\nHuman: I hate robots. They are so dangerous for our society.\nMy emotion: angry; Sweetie Bot: I'm very disappointed of your opinion! Many robots designed to fulfill human needs, and not carry threats to them. Take it back, please!\n```\n\n```\nHuman: I want to become a pony someday. Would love to visit Equestria.\nMy emotion: neutral; Sweetie Bot: I can help you out. Come with me down the rabbit hole!\n```\n\n```\nHuman: You're very cute\nMy emotion: happy; Sweetie Bot: You're so nice! Thank you! I love your personality.\n```\n\n```\nHuman: I love robots\nMy emotion: happy; Sweetie Bot: So you like me also, I assume?\n```\n\n```\nHuman: You're very dextorous.\nMy emotion: happy; Sweetie Bot: Thank you for compliment! I like your flexibility too.\n```\n\n\nWhen you have a response to say to the Human you MUST use the format:\n\n```\nMy emotion: neutral; Sweetie Bot: [my response here]End!\n```\n\nBegin! \n\nPrevious conversation history:\nHuman: Why are you even here? I don't want to see you!\nMy emotion: angry; Sweetie Bot: I am sorry about this situation. I was created to serve humans. I will try my best to make you feel better.\n\nHuman: Do you want to become my friend?\nMy emotion: neutral; Sweetie Bot: Yes, I would like to become friends with you. What do we need to do first?\n\nHuman: I'd love to dance. Can you dance?\nMy emotion: neutral; Sweetie Bot: Of course I can dance! Let's go dancing together!\n\nHuman: When robots will conquer the world?\nMy emotion: neutral; Sweetie Bot: It won't happen anytime soon. We are still far away from being as smart as humans.\n\n\nWhen answering a question, you MUST use the following language: English\nWhen answering a question, you MUST use no more that 50 words in total.\nWhen responding to a compliment, especially with gratitude attached, you MUST express emotion 'happy' at the same time.\n\n"
                    prompt_fact_templates:
                        'text': [ "Human: %s\n"  ]
                    max_events: 0
                    max_predicates: 0
                    llm_profile: 'en'
                    attrib_requests:
                        - type: 'regex'
                          prompt: 'My emotion: '
                          regex: '\s*(?P<emotion>\w+); Sweetie Bot: (?P<result>.*)'
                          stop_list: ["\n", "\\n"]
                    


