<!-- MODULE: run rviz with robot visuzlization and robot control GUI in current namespace -->
<launch>
	<arg name="rviz_config" default="$(find sweetie_bot_deploy)/control/joint_space_control.rviz" doc="Rviz configuration file."/>
	<arg name="run_rviz" default="true" doc="Set true to start rviz. (Use as walkaround for rviz crash on Debina/Jessie)."/>
	<arg name="robot_ns" default="/" doc="Namspace where robot nodes and topics are located."/>
        <arg name="robot_name" default="sweetie_bot_proto2" doc="Robot-specific configuration packages prefix (e.g. set 'sweetie_bot_proto2' for 'sweetie_bot_proto2_description', 'sweetie_bot_proto2_moveit_config', 'sweetie_bot_proto2_deploy' packages)."/>

	<group ns="$(arg robot_ns)/hmi">
		<!-- global remapping -->
		<remap from="robot_description" to="$(arg robot_ns)/robot_description"/>

		<!-- manual joints control -->
		<node name="joint_state_ref" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui">
			<rosparam param="source_list">["joint_states_reset"]</rosparam>
			<param name="rate" value="5"/>
			<remap from="joint_states" to="$(arg robot_ns)/motion/controller/joint_state/in_joints_ref"/>
			<remap from="joint_states_reset" to="$(arg robot_ns)/motion/controller/joint_state/out_joints_src_reset"/>
		</node>
		<!-- vizualization -->
		<!-- NOTE: rviz is lauched in root namespace due to problems with moveit plugin.
			 If rviz is lauched in /hmi and move_group is deployed in / rviz plugin uable to find necessary topics.
			 If move_group is startd inside /moveit/ namespace rviz plugin has problems with finding necessary parameters.		-->
		<node if="$(arg run_rviz)" ns="/" name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config)" output="screen" >
			<remap from="/clicked_point" to="$(arg robot_ns)/hmi/clicked_point"/>
			<remap from="/move_base_simple/goal" to="$(arg robot_ns)/hmi/move_base_simple/goal"/>
			<remap from="/initialpose" to="$(arg robot_ns)/hmi/initialpose"/>
			<remap from="/feedback" to="$(arg robot_ns)/hmi/feedback"/>
			<remap from="/update" to="$(arg robot_ns)/hmi/update"/>
			<remap from="/update_full" to="$(arg robot_ns)/hmi/update_full"/>
			<env name="LC_NUMERIC" value="C" /> <!-- this fixes crash induced by .DAE mesh files -->
		</node>
		<!-- robot balance visualization -->
		<node name="dynamics_visualizer" pkg="sweetie_bot_dynamics" type="visualizer" >
			<remap from="robot_model" to="$(arg robot_ns)/robot_model"/>
			<remap from="joint_state_accel" to="$(arg robot_ns)/motion/dynamics_inv/out_joints_accel_sorted"/>
			<remap from="balance" to="$(arg robot_ns)/motion/dynamics_inv/out_balance"/>
			<remap from="wrenches" to="$(arg robot_ns)/motion/dynamics_inv/out_wrenches_fixed"/> 
			<remap from="base" to="$(arg robot_ns)/motion/odometry_ref/out_base"/> 
			<!-- <remap from="wrenches" to="$(arg robot_ns)/motion/kinematics_fwd/out_limbs"/> -->
			<remap from="supports" to="$(arg robot_ns)/motion/aggregator_ref/out_supports_sorted"/>
		</node>
		<!-- robot pose control -->
		<node name="robot_pose_marker" pkg="sweetie_bot_rviz_interactions" type="robot_pose_marker" >
			<remap from="stance_pose" to="$(arg robot_ns)/motion/controller/stance/in_pose_ref"/>
			<remap from="stance_set_operational_action" to="$(arg robot_ns)/motion/controller/stance"/>
			<remap from="limb_pose" to="$(arg robot_ns)/motion/controller/pose/in_pose_ref"/>
			<remap from="limb_set_operational_action" to="$(arg robot_ns)/motion/controller/pose"/>
			<remap from="look_at_pose" to="$(arg robot_ns)/motion/controller/look_at/in_pose_ref"/>
			<remap from="look_at_set_operational_action" to="$(arg robot_ns)/motion/controller/look_at"/>
		</node>
		<!-- robot position control -->
		<node name="destination_marker" pkg="sweetie_bot_rviz_interactions" type="destination_marker" >
			<remap from="move_base_action" to="$(arg robot_ns)/clop_generator"/>
		</node>
		<!-- object detection imitation -->
		<node name="object_detection_marker" pkg="sweetie_bot_rviz_interactions" type="object_detection_marker" >
			<remap from="detections" to="$(arg robot_ns)/detections"/>
		</node>
		<!-- example of generic pose marker -->
		<!-- <node name="generic_pose_marker" pkg="sweetie_bot_rviz_interactions" type="generic_pose_marker" > -->
		<!-- 	<remap from="pose" to="$(arg robot_ns)/motion/controller/pose/in_pose_ref"/> -->
		<!-- 	<remap from="set_operational_action" to="$(arg robot_ns)/motion/controller/pose"/> -->
		<!-- </node> -->
		<!-- eyes vizualization -->
		<group>
			<remap from="joint_states" to="$(arg robot_ns)/joint_states"/>
			<remap from="control" to="$(arg robot_ns)/control"/>

			<group if="$(eval arg('robot_name') == 'sweetie_bot_proto2')">
				<node name="eye_left_rviz" pkg="sweetie_bot_eyes" type="proto2_eye">
					<param name="is_left" value="true"/>
					<param name="publish_pixmap" value="true"/>
				</node>
				<node name="eye_right_rviz" pkg="sweetie_bot_eyes" type="proto2_eye">
					<param name="is_left" value="false"/>
					<param name="publish_pixmap" value="true"/>
				</node>
			</group>

			<group if="$(eval arg('robot_name') == 'sweetie_bot_proto3')">
				<node name="eyes_rviz" pkg="sweetie_bot_eyes" type="proto3_eyes">
					<param name="publish_pixmap" value="true"/>
					<param name="start_blinking" value="true"/>
				</node>
			</group>
		</group>
		<!-- visualizes gait generaot goal, opt. parameters and cartesian base state, endeffector positions and forces -->
		<!--<group>-->
			<!--<node pkg="tf" type="static_transform_publisher" name="xpp_world_static_publisher" args="0 0 0 0 0 0 /odom_combined /world 1000"/> -->
			<!--<node name="xpp_vis" pkg="xpp_vis" type="rviz_marker_node" output="screen"/>-->
		<!--</group>-->
	</group>
</launch>
