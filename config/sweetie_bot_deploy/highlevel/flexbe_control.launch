<!-- DEPLOYMENT: high level contol system -->
<!-- motion, camera, flexbe, joystick, soar -->
<launch>
	<arg name="run_real" default="false" doc="Run on real robot."/>
	<arg name="robot" default="true" doc="Launch components which meant to be run on robot side."/>
	<arg name="host" default="true" doc="Launch components  which meant to be run on host side."/>

	<arg name="robot_name" default="sweetie_bot_proto3" doc="Robot-specific configuration packages prefix (e.g. set 'sweetie_bot_proto2' for 'sweetie_bot_proto2_description', 'sweetie_bot_proto2_moveit_config', 'sweetie_bot_proto2_deploy' packages)."/>
	<arg name="robot_profile" default="default" doc="Use configuration profile (load_param.launch, *.cpf, .log4cpp files) located in '`rospack find {robot_name}_deploy`/{robot_profile}' directory."/>
	<arg name="robot_profile_path" default="$(eval find(arg('robot_name')+'_deploy') + '/' + arg('robot_profile'))" doc="Fully qualified path to configuration profile. By default 'robot_name' and 'robot_profile' parameters are sed to determine it."/>
	<arg name="robot_ns" default="/" doc="Namespace where to run robot components "/>

	<arg name="run_moveit" default="false" doc="Run move_group associated with robot."/>
	<arg name="run_vision" default="false" doc="Run vision node."/>
	<arg name="run_nlp" default="true" doc="Run natural language processing nodes: speech to text, language model."/>
	<arg name="run_flexbe" default="true" doc="Run flexbe behaviour engine. For debug purpose it can start separately."/>
	<arg name="run_flexbe_gui" default="false" doc="Start flexbe gui."/>

	<machine name="localhost" address="localhost" user="$(env USER)" default="true"/>
	<machine name="sweetiebot" address="localhost" user="$(env USER)" default="true"/>
	<!--<machine name="sweetiebot" address="$(eval robot_name.replace('sweetie_bot_',''))" user="sweetie" default="never"/>-->


	<!-- Check if path to button exists -->
	<arg name="yaml_config" default="$(eval open(robot_profile_path + '/../default/hardware.yaml').read())" />
	<arg name="button_dev" default="$(eval eval('_' + '_import_' + '_(\'yaml\')').safe_load(yaml_config)['hardware']['external_button']['sysfs_path'])" />
	<arg name="run_button" default="$(eval 'true' if eval('_' + '_import_' + '_(\'os\')').path.exists(button_dev) else 'false')" />

	<!-- load parameters -->
	<group if="$(arg host)">
		<include ns="$(arg robot_ns)" file="$(arg robot_profile_path)/load_param.launch">
			<arg name="run_real" value="$(arg run_real)" />
		</include>
	</group>

	<!-- ROBOT -->

	<!-- start robot -->
	<group ns="$(arg robot_ns)">
		<include file="$(find sweetie_bot_deploy)/motion_core/sweetie_bot_core.launch">
			<arg name="run_real" value="$(arg run_real)" /> 
			<arg name="host" value="$(arg host)" /> 
			<arg name="robot" value="$(arg robot)" /> 
			<arg if="$(arg run_real)" name="modules" value="motion.lua controller_all.lua" />
			<arg unless="$(arg run_real)" name="modules" value="virtual_motion.lua controller_all.lua" />
			<arg name="overlays" value="$(arg robot_profile_path) control motion_core" /> 
			<arg name="interactive" value="false" /> 
		</include>
		<!-- robot-specific ROS nodes -->
		<include if="$(eval robot and run_real)" file="$(arg robot_profile_path)/robot_module.launch">
			<arg name="robot_ns" value="$(arg robot_ns)" /> 
		</include>
	</group>

	<!-- robot nodes on host side -->
	<group if="$(arg host)">

		<!-- CORE COMPONENTS -->

		<group ns="$(arg robot_ns)">
			<!-- moveit -->
			<include if="$(arg run_moveit)" file="$(find sweetie_bot_deploy)/control/moveit.launch">
				<arg name="robot_ns" value="$(arg robot_ns)" /> 
				<arg name="robot_name" value="$(arg robot_name)" />
			</include>
			<!-- gait generator -->
			<node name="gait_generator" pkg="sweetie_bot_gait_generator" type="towr_gait_generator" output="screen">
				<remap from="step_sequence" to="motion/controller/step_sequence" />     
			</node>
			<!-- control node for mouth, ears and horn -->
			<node pkg="sweetie_bot_body_language" name="body_language" type="body_language" output="screen"/>
			<!-- <node pkg="sweetie_bot_body_language" name="led" type="led" output="screen"/> -->
			<!-- voice node  -->
			<env name="LD_PRELOAD" value="/usr/lib/x86_64-linux-gnu/libffi.so.7" />
			<node pkg="sweetie_bot_voice" type="voice" name="voice" output="screen">
				<remap from="control" to="$(arg robot_ns)/control" />
			</node>
			<group  if="$(arg run_nlp)">
				<!-- run external button node if device is connected -->
				<node ns="hardware" name="external_button" pkg="rosserial_arduino" type="serial_node.py" if="$(arg run_button)">
					<remap from="pushed" to="$(arg robot_ns)/mic_button" />
					<!-- rename path param for consistency of config -->
					<remap from="~port" to="~sysfs_path" />
				</node>

				<!-- microphone node -->
				<node pkg="sweetie_bot_mic" type="microphone" name="microphone" output="screen">
					<remap from="sound_event" to="$(arg robot_ns)/sound_event" />
					<remap from="mic_button" to="$(arg robot_ns)/mic_button" />
				</node>
				<!-- transcription node -->
				<node pkg="sweetie_bot_stt" type="stt_service_node" name="transcriber" output="screen">
					<remap from="transcribe_api" to="$(arg robot_ns)/transcribe_api" />
					<remap from="transcribe" to="$(arg robot_ns)/transcribe" />
				</node>
				<!-- translation node -->
				<node pkg="sweetie_bot_translate" type="translate_service_node" name="translator" output="screen">
					<remap from="translate" to="$(arg robot_ns)/translate" />
					<remap from="libre_translate" to="$(arg robot_ns)/libre_translate" />
				</node>
				<!-- language model interface node -->
				<node pkg="sweetie_bot_llm" type="llm_service_node" name="lang_model" output="screen">
					<remap from="llm_request" to="$(arg robot_ns)/llm_request" />
				</node>
			</group>
			<!-- FLEXBE: control node and action server -->
			<group if="$(arg run_flexbe)">
				<include file="$(find sweetie_bot_deploy)/highlevel/flexbe.launch" >
					<arg name="gui" value="false" />
					<arg name="robot_ns" value="$(arg robot_ns)" />
					<arg name="flexbe_ns" value="$(arg robot_ns)/flexbe" />
				</include>
			</group>
			<!-- SOAR cognition system -->
			<group if="$(arg run_flexbe)">
				<node pkg="sweetie_bot_soar" type="soar" name="soar" />
			</group>
			<!-- vision subsystem -->
			<group if="$(arg run_vision)">
				<!-- run vision node -->
				<include file="$(find sweetie_bot_deploy)/highlevel/vision.launch">
					<arg name="robot_ns" value="$(arg robot_ns)" /> 
					<arg name="run_real" value="$(arg run_real)" /> 
				</include>
			</group>
		</group>

		<!-- HMI: launch operator GUI -->

		<!-- joystick (should connected to host) -->
		<include file="$(find sweetie_bot_deploy)/highlevel/joy.launch">
			<arg name="robot_ns" value="$(arg robot_ns)" /> 
		</include>

		<!-- operator interface nodes: flexbe_app -->
		<group if="$(eval run_flexbe and run_flexbe_gui)">
			<include file="$(find sweetie_bot_deploy)/highlevel/flexbe_gui.launch" >
				<arg name="flexbe_ns" value="$(arg robot_ns)/flexbe" />
			</include>
		</group>

		<!-- rviz and markers -->
		<include file="$(find sweetie_bot_deploy)/control/hmi.launch">
			<arg name="robot_name" value="$(arg robot_name)" />
			<arg name="robot_ns" value="$(arg robot_ns)" /> 
			<arg name="rviz_config" value="$(arg robot_profile_path)/joint_space_control.rviz" /> 
		</include>
	</group>
</launch>
