#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy, os, sys
from actionlib import SimpleActionClient
from xmlrpc.client import Binary

from control_msgs.msg import FollowJointTrajectoryAction
from control_msgs.msg import FollowJointTrajectoryGoal
from control_msgs.msg import FollowJointTrajectoryResult
from actionlib_msgs.msg import GoalStatus

def print_help():
    print('Usage: {0} PARAM'.format(sys.argv[0]))
    print('''

Execute control_msgs/FollowJointTrajectory stored as ROS parameter PARAM in namespace /saved_msgs/joint_trajectory.
''')
    sys.exit(0)

# parse command line arguments
if len(sys.argv) < 2:
    print_help()

rospy.init_node('execute_join_trajectory')

# get ROS parameter name
param = sys.argv[1]
param = 'saved_msgs/joint_trajectory/' + param
param_value = rospy.get_param(param, None)
if not isinstance(param_value, Binary):
    rospy.logerr('ROS parameter "%s" is not defined or its type is not Binary.' % param)
    sys.exit(-1)
# deserialize message
msg = FollowJointTrajectoryGoal()
msg.deserialize(param_value.data)
# execute message
client = SimpleActionClient('motion/controller/joint_trajectory', FollowJointTrajectoryAction) 
if not client.wait_for_server(timeout=rospy.Duration(3.0)):
    rospy.logerr('motion/controller/joint_trajectory is not available.')
    sys.exit(-1)
print('Executing FollowJointTrajectory action...')
client.send_goal_and_wait(msg)
state = client.get_state()
result = client.get_result()
# parse result
if state == GoalStatus.SUCCEEDED:
    # everything is good
    print('action SUCCEEDED: ' + repr(result.error_code) + " " + result.error_string)
elif state in [ GoalStatus.ABORTED, GoalStatus.PREEMPTED ]:
    # perhaps we stuck in midway due to tolerance error or controller switch.
    print('action ABORTED: ' + repr(result.error_code) + " " + result.error_string)
elif state in [ GoalStatus.REJECTED, GoalStatus.RECALLED ]:
    # Execution has not started, perhaps due to invalid goal.
    print('action REJECTED: ' + repr(result.error_code) + " " + result.error_string)
else:
    print('action FAILED (' + repr(state) + '): ' + repr(result.error_code) + " " + result.error_string)

