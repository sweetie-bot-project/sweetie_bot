#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy, os, sys
from actionlib import SimpleActionClient
import xmlrpclib

from sweetie_bot_control_msgs.msg import FollowStepSequenceAction
from sweetie_bot_control_msgs.msg import FollowStepSequenceGoal
from sweetie_bot_control_msgs.msg import FollowStepSequenceResult
from actionlib_msgs.msg import GoalStatus

def print_help():
	print 'Usage: PARAM'.format(sys.argv[0])
	print '''
Execute sweetie_bot_control_msgs/FollowStepSequenceGoal stored in PARAM.
'''
	sys.exit(0)

# parse command line arguments
if len(sys.argv) < 2:
    print_help()

rospy.init_node('step_sequence_execute')

# get ROS parameter name
param = sys.argv[1]
param_value = rospy.get_param(param)
if not isinstance(param_value, xmlrpclib.Binary):
    rospy.logerr('ROS parameter type is not Binary.')
    sys.exit(-1)
# deserialize message
msg = FollowStepSequenceGoal()
msg.deserialize(param_value.data)
del msg.base_motion.points[:]
# execute message
client = SimpleActionClient('motion/controller/step_sequence', FollowStepSequenceAction) 
if not client.wait_for_server(timeout=rospy.Duration(3.0)):
    rospy.logerr('motion/controller/step_sequence is not available.')
    sys.exit(-1)
print('Start FollowStepSequence action...')
client.send_goal_and_wait(msg)
state = client.get_state()
result = client.get_result()
# parse result
if state == GoalStatus.SUCCEEDED:
    # everything is good
    print('FollowStepSequence action succesed: ' + repr(result.error_code) + " " + result.error_string)
elif state in [ GoalStatus.ABORTED, GoalStatus.PREEMPTED ]:
    # perhaps we stuck in midway due to tolerance error or controller switch.
    print('FollowStepSequence action aborted: ' + repr(result.error_code) + " " + result.error_string)
elif state in [ GoalStatus.REJECTED, GoalStatus.RECALLED ]:
    # Execution has not started, perhaps due to invalid goal.
    print('FollowStepSequence action rejected: ' + repr(result.error_code) + " " + result.error_string)
else:
    print('warn', 'ExecuteStepSequence: FollowStepSequence action failed (' + repr(state) + '): ' + repr(result.error_code) + " " + result.error_string)

